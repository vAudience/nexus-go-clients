/*
vAudience AIgentChat API

chat and api server for AIgents

API version: 0.20.10
Contact: contact@vaudience.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aigentchat

import (
	"encoding/json"
	"fmt"
)

// checks if the AuditTrail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuditTrail{}

// AuditTrail struct for AuditTrail
type AuditTrail struct {
	ChannelId string `json:"channel_id"`
	Messages []AuditTrailMessage `json:"messages,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AuditTrail AuditTrail

// NewAuditTrail instantiates a new AuditTrail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuditTrail(channelId string) *AuditTrail {
	this := AuditTrail{}
	this.ChannelId = channelId
	return &this
}

// NewAuditTrailWithDefaults instantiates a new AuditTrail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuditTrailWithDefaults() *AuditTrail {
	this := AuditTrail{}
	return &this
}

// GetChannelId returns the ChannelId field value
func (o *AuditTrail) GetChannelId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ChannelId
}

// GetChannelIdOk returns a tuple with the ChannelId field value
// and a boolean to check if the value has been set.
func (o *AuditTrail) GetChannelIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChannelId, true
}

// SetChannelId sets field value
func (o *AuditTrail) SetChannelId(v string) {
	o.ChannelId = v
}

// GetMessages returns the Messages field value if set, zero value otherwise.
func (o *AuditTrail) GetMessages() []AuditTrailMessage {
	if o == nil || IsNil(o.Messages) {
		var ret []AuditTrailMessage
		return ret
	}
	return o.Messages
}

// GetMessagesOk returns a tuple with the Messages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditTrail) GetMessagesOk() ([]AuditTrailMessage, bool) {
	if o == nil || IsNil(o.Messages) {
		return nil, false
	}
	return o.Messages, true
}

// HasMessages returns a boolean if a field has been set.
func (o *AuditTrail) HasMessages() bool {
	if o != nil && !IsNil(o.Messages) {
		return true
	}

	return false
}

// SetMessages gets a reference to the given []AuditTrailMessage and assigns it to the Messages field.
func (o *AuditTrail) SetMessages(v []AuditTrailMessage) {
	o.Messages = v
}

func (o AuditTrail) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuditTrail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["channel_id"] = o.ChannelId
	if !IsNil(o.Messages) {
		toSerialize["messages"] = o.Messages
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AuditTrail) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"channel_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAuditTrail := _AuditTrail{}

	err = json.Unmarshal(data, &varAuditTrail)

	if err != nil {
		return err
	}

	*o = AuditTrail(varAuditTrail)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "channel_id")
		delete(additionalProperties, "messages")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAuditTrail struct {
	value *AuditTrail
	isSet bool
}

func (v NullableAuditTrail) Get() *AuditTrail {
	return v.value
}

func (v *NullableAuditTrail) Set(val *AuditTrail) {
	v.value = val
	v.isSet = true
}

func (v NullableAuditTrail) IsSet() bool {
	return v.isSet
}

func (v *NullableAuditTrail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuditTrail(val *AuditTrail) *NullableAuditTrail {
	return &NullableAuditTrail{value: val, isSet: true}
}

func (v NullableAuditTrail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuditTrail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


