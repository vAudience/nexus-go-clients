/*
vAudience AIgentChat API

chat and api server for AIgents

API version: 0.20.3
Contact: contact@vaudience.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aigentchat

import (
	"encoding/json"
	"fmt"
)

// HostingLocation the model 'HostingLocation'
type HostingLocation string

// List of HostingLocation
const (
	HostingLocationNil HostingLocation = ""
	HostingLocationUSA HostingLocation = "usa"
	HostingLocationEU HostingLocation = "europe"
	HostingLocationGERMANY HostingLocation = "germany"
	HostingLocationSWISS HostingLocation = "swiss"
	HostingLocationUK HostingLocation = "uk"
	HostingLocationANY HostingLocation = "any"
)

// All allowed values of HostingLocation enum
var AllowedHostingLocationEnumValues = []HostingLocation{
	"",
	"usa",
	"europe",
	"germany",
	"swiss",
	"uk",
	"any",
}

func (v *HostingLocation) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := HostingLocation(value)
	for _, existing := range AllowedHostingLocationEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid HostingLocation", value)
}

// NewHostingLocationFromValue returns a pointer to a valid HostingLocation
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewHostingLocationFromValue(v string) (*HostingLocation, error) {
	ev := HostingLocation(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for HostingLocation: valid values are %v", v, AllowedHostingLocationEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v HostingLocation) IsValid() bool {
	for _, existing := range AllowedHostingLocationEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to HostingLocation value
func (v HostingLocation) Ptr() *HostingLocation {
	return &v
}

type NullableHostingLocation struct {
	value *HostingLocation
	isSet bool
}

func (v NullableHostingLocation) Get() *HostingLocation {
	return v.value
}

func (v *NullableHostingLocation) Set(val *HostingLocation) {
	v.value = val
	v.isSet = true
}

func (v NullableHostingLocation) IsSet() bool {
	return v.isSet
}

func (v *NullableHostingLocation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHostingLocation(val *HostingLocation) *NullableHostingLocation {
	return &NullableHostingLocation{value: val, isSet: true}
}

func (v NullableHostingLocation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHostingLocation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

