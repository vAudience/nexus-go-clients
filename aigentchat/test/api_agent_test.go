/*
vAudience AIgentChat API

Testing AgentAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package aigentchat

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/vaudience/nexus-go-clients/aigentchat"
)

func Test_aigentchat_AgentAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test AgentAPIService AddAssignedTool", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var id string
		var toolId string

		resp, httpRes, err := apiClient.AgentAPI.AddAssignedTool(context.Background(), orgId, id, toolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentAPIService AddAttachedFileID", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var id string
		var fileId string

		resp, httpRes, err := apiClient.AgentAPI.AddAttachedFileID(context.Background(), orgId, id, fileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentAPIService AddInitialUserMessage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var id string

		resp, httpRes, err := apiClient.AgentAPI.AddInitialUserMessage(context.Background(), orgId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentAPIService AddSystemMessage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var id string

		resp, httpRes, err := apiClient.AgentAPI.AddSystemMessage(context.Background(), orgId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentAPIService CreateAgent", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.AgentAPI.CreateAgent(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentAPIService DeleteAgent", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var id string

		resp, httpRes, err := apiClient.AgentAPI.DeleteAgent(context.Background(), orgId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentAPIService GetAgent", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var id string

		resp, httpRes, err := apiClient.AgentAPI.GetAgent(context.Background(), orgId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentAPIService ListAgents", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.AgentAPI.ListAgents(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentAPIService RemoveAssignedTool", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var id string
		var toolId string

		resp, httpRes, err := apiClient.AgentAPI.RemoveAssignedTool(context.Background(), orgId, id, toolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentAPIService RemoveAttachedFileID", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var id string
		var fileId string

		resp, httpRes, err := apiClient.AgentAPI.RemoveAttachedFileID(context.Background(), orgId, id, fileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentAPIService RemoveInitialUserMessage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var id string

		resp, httpRes, err := apiClient.AgentAPI.RemoveInitialUserMessage(context.Background(), orgId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentAPIService RemoveSystemMessage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var id string

		resp, httpRes, err := apiClient.AgentAPI.RemoveSystemMessage(context.Background(), orgId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentAPIService SearchAgents", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.AgentAPI.SearchAgents(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentAPIService UpdateAgent", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var id string

		resp, httpRes, err := apiClient.AgentAPI.UpdateAgent(context.Background(), orgId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
