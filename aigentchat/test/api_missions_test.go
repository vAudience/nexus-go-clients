/*
vAudience AIgentChat API

Testing MissionsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package aigentchat

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/vaudience/nexus-go-clients/aigentchat"
)

func Test_aigentchat_MissionsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test MissionsAPIService CancelMission", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var missionId string

		httpRes, err := apiClient.MissionsAPI.CancelMission(context.Background(), orgId, missionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MissionsAPIService CreateMission", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var missionExecutorId string

		resp, httpRes, err := apiClient.MissionsAPI.CreateMission(context.Background(), orgId, missionExecutorId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MissionsAPIService DeleteMission", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var missionId string

		httpRes, err := apiClient.MissionsAPI.DeleteMission(context.Background(), orgId, missionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MissionsAPIService GetMission", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var missionId string

		resp, httpRes, err := apiClient.MissionsAPI.GetMission(context.Background(), orgId, missionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MissionsAPIService ListMissionsByExecutorID", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var missionExecutorId string

		resp, httpRes, err := apiClient.MissionsAPI.ListMissionsByExecutorID(context.Background(), orgId, missionExecutorId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MissionsAPIService ListMissionsByOrg", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.MissionsAPI.ListMissionsByOrg(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
