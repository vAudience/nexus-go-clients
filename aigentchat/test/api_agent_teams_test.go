/*
vAudience AIgentChat API

Testing AgentTeamsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package aigentchat

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/vaudience/nexus-go-clients/aigentchat"
)

func Test_aigentchat_AgentTeamsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test AgentTeamsAPIService AddAgentToTeam", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var teamId string
		var agentId string

		resp, httpRes, err := apiClient.AgentTeamsAPI.AddAgentToTeam(context.Background(), orgId, teamId, agentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentTeamsAPIService CreateAgentTeam", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.AgentTeamsAPI.CreateAgentTeam(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentTeamsAPIService DeleteAgentTeam", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var teamId string

		resp, httpRes, err := apiClient.AgentTeamsAPI.DeleteAgentTeam(context.Background(), orgId, teamId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentTeamsAPIService GetAgentTeam", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var teamId string

		resp, httpRes, err := apiClient.AgentTeamsAPI.GetAgentTeam(context.Background(), orgId, teamId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentTeamsAPIService GetFullAgentTeam", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var teamId string

		resp, httpRes, err := apiClient.AgentTeamsAPI.GetFullAgentTeam(context.Background(), orgId, teamId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentTeamsAPIService ListAgentTeams", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.AgentTeamsAPI.ListAgentTeams(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentTeamsAPIService RemoveAgentFromTeam", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var teamId string
		var agentId string

		resp, httpRes, err := apiClient.AgentTeamsAPI.RemoveAgentFromTeam(context.Background(), orgId, teamId, agentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentTeamsAPIService UpdateAgentTeam", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var teamId string

		resp, httpRes, err := apiClient.AgentTeamsAPI.UpdateAgentTeam(context.Background(), orgId, teamId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentTeamsAPIService UpdateSystemMessages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var teamId string

		resp, httpRes, err := apiClient.AgentTeamsAPI.UpdateSystemMessages(context.Background(), orgId, teamId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentTeamsAPIService UpdateUserMessages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var teamId string

		resp, httpRes, err := apiClient.AgentTeamsAPI.UpdateUserMessages(context.Background(), orgId, teamId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
