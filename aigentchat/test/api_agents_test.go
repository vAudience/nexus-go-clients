/*
vAudience AIgentChat API

Testing AgentsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package aigentchat

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/vaudience/nexus-go-clients/aigentchat"
)

func Test_aigentchat_AgentsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test AgentsAPIService AddAssignedTool", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var id string
		var toolId string

		resp, httpRes, err := apiClient.AgentsAPI.AddAssignedTool(context.Background(), orgId, id, toolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentsAPIService AddAttachedFileID", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var id string
		var fileId string

		resp, httpRes, err := apiClient.AgentsAPI.AddAttachedFileID(context.Background(), orgId, id, fileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentsAPIService AddInitialUserMessage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var id string

		resp, httpRes, err := apiClient.AgentsAPI.AddInitialUserMessage(context.Background(), orgId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentsAPIService AddSystemMessage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var id string

		resp, httpRes, err := apiClient.AgentsAPI.AddSystemMessage(context.Background(), orgId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentsAPIService CreateAgent", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.AgentsAPI.CreateAgent(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentsAPIService DeleteAgent", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var id string

		resp, httpRes, err := apiClient.AgentsAPI.DeleteAgent(context.Background(), orgId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentsAPIService GetAgent", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var id string

		resp, httpRes, err := apiClient.AgentsAPI.GetAgent(context.Background(), orgId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentsAPIService ListAgents", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.AgentsAPI.ListAgents(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentsAPIService RemoveAssignedTool", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var id string
		var toolId string

		resp, httpRes, err := apiClient.AgentsAPI.RemoveAssignedTool(context.Background(), orgId, id, toolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentsAPIService RemoveAttachedFileID", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var id string
		var fileId string

		resp, httpRes, err := apiClient.AgentsAPI.RemoveAttachedFileID(context.Background(), orgId, id, fileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentsAPIService RemoveInitialUserMessage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var id string

		resp, httpRes, err := apiClient.AgentsAPI.RemoveInitialUserMessage(context.Background(), orgId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentsAPIService RemoveSystemMessage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var id string

		resp, httpRes, err := apiClient.AgentsAPI.RemoveSystemMessage(context.Background(), orgId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentsAPIService SearchAgents", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.AgentsAPI.SearchAgents(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentsAPIService UpdateAgent", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var id string

		resp, httpRes, err := apiClient.AgentsAPI.UpdateAgent(context.Background(), orgId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
