/*
vAudience AIgentChat API

chat and api server for AIgents

API version: 0.19.3
Contact: contact@vaudience.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aigentchat

import (
	"encoding/json"
)

// checks if the AIgencyThinking type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AIgencyThinking{}

// AIgencyThinking struct for AIgencyThinking
type AIgencyThinking struct {
	Content *string `json:"content,omitempty"`
	IsRedacted *bool `json:"is_redacted,omitempty"`
	Signature *string `json:"signature,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AIgencyThinking AIgencyThinking

// NewAIgencyThinking instantiates a new AIgencyThinking object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAIgencyThinking() *AIgencyThinking {
	this := AIgencyThinking{}
	return &this
}

// NewAIgencyThinkingWithDefaults instantiates a new AIgencyThinking object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAIgencyThinkingWithDefaults() *AIgencyThinking {
	this := AIgencyThinking{}
	return &this
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *AIgencyThinking) GetContent() string {
	if o == nil || IsNil(o.Content) {
		var ret string
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AIgencyThinking) GetContentOk() (*string, bool) {
	if o == nil || IsNil(o.Content) {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *AIgencyThinking) HasContent() bool {
	if o != nil && !IsNil(o.Content) {
		return true
	}

	return false
}

// SetContent gets a reference to the given string and assigns it to the Content field.
func (o *AIgencyThinking) SetContent(v string) {
	o.Content = &v
}

// GetIsRedacted returns the IsRedacted field value if set, zero value otherwise.
func (o *AIgencyThinking) GetIsRedacted() bool {
	if o == nil || IsNil(o.IsRedacted) {
		var ret bool
		return ret
	}
	return *o.IsRedacted
}

// GetIsRedactedOk returns a tuple with the IsRedacted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AIgencyThinking) GetIsRedactedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsRedacted) {
		return nil, false
	}
	return o.IsRedacted, true
}

// HasIsRedacted returns a boolean if a field has been set.
func (o *AIgencyThinking) HasIsRedacted() bool {
	if o != nil && !IsNil(o.IsRedacted) {
		return true
	}

	return false
}

// SetIsRedacted gets a reference to the given bool and assigns it to the IsRedacted field.
func (o *AIgencyThinking) SetIsRedacted(v bool) {
	o.IsRedacted = &v
}

// GetSignature returns the Signature field value if set, zero value otherwise.
func (o *AIgencyThinking) GetSignature() string {
	if o == nil || IsNil(o.Signature) {
		var ret string
		return ret
	}
	return *o.Signature
}

// GetSignatureOk returns a tuple with the Signature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AIgencyThinking) GetSignatureOk() (*string, bool) {
	if o == nil || IsNil(o.Signature) {
		return nil, false
	}
	return o.Signature, true
}

// HasSignature returns a boolean if a field has been set.
func (o *AIgencyThinking) HasSignature() bool {
	if o != nil && !IsNil(o.Signature) {
		return true
	}

	return false
}

// SetSignature gets a reference to the given string and assigns it to the Signature field.
func (o *AIgencyThinking) SetSignature(v string) {
	o.Signature = &v
}

func (o AIgencyThinking) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AIgencyThinking) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Content) {
		toSerialize["content"] = o.Content
	}
	if !IsNil(o.IsRedacted) {
		toSerialize["is_redacted"] = o.IsRedacted
	}
	if !IsNil(o.Signature) {
		toSerialize["signature"] = o.Signature
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AIgencyThinking) UnmarshalJSON(data []byte) (err error) {
	varAIgencyThinking := _AIgencyThinking{}

	err = json.Unmarshal(data, &varAIgencyThinking)

	if err != nil {
		return err
	}

	*o = AIgencyThinking(varAIgencyThinking)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "content")
		delete(additionalProperties, "is_redacted")
		delete(additionalProperties, "signature")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAIgencyThinking struct {
	value *AIgencyThinking
	isSet bool
}

func (v NullableAIgencyThinking) Get() *AIgencyThinking {
	return v.value
}

func (v *NullableAIgencyThinking) Set(val *AIgencyThinking) {
	v.value = val
	v.isSet = true
}

func (v NullableAIgencyThinking) IsSet() bool {
	return v.isSet
}

func (v *NullableAIgencyThinking) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAIgencyThinking(val *AIgencyThinking) *NullableAIgencyThinking {
	return &NullableAIgencyThinking{value: val, isSet: true}
}

func (v NullableAIgencyThinking) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAIgencyThinking) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


