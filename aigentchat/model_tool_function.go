/*
vAudience AIgentChat API

chat and api server for AIgents

API version: 0.20.10
Contact: contact@vaudience.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aigentchat

import (
	"encoding/json"
	"fmt"
)

// checks if the ToolFunction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ToolFunction{}

// ToolFunction struct for ToolFunction
type ToolFunction struct {
	Description *string `json:"description,omitempty"`
	HostingLocation *string `json:"hosting_location,omitempty"`
	I18n *map[string]ToolI18n `json:"i18n,omitempty"`
	Icon *string `json:"icon,omitempty"`
	Id string `json:"id"`
	Name string `json:"name"`
	Parameters *string `json:"parameters,omitempty"`
	ResponseVisible bool `json:"response_visible"`
	ToolId string `json:"tool_id"`
	Version string `json:"version"`
	AdditionalProperties map[string]interface{}
}

type _ToolFunction ToolFunction

// NewToolFunction instantiates a new ToolFunction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewToolFunction(id string, name string, responseVisible bool, toolId string, version string) *ToolFunction {
	this := ToolFunction{}
	this.Id = id
	this.Name = name
	this.ResponseVisible = responseVisible
	this.ToolId = toolId
	this.Version = version
	return &this
}

// NewToolFunctionWithDefaults instantiates a new ToolFunction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewToolFunctionWithDefaults() *ToolFunction {
	this := ToolFunction{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ToolFunction) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ToolFunction) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ToolFunction) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ToolFunction) SetDescription(v string) {
	o.Description = &v
}

// GetHostingLocation returns the HostingLocation field value if set, zero value otherwise.
func (o *ToolFunction) GetHostingLocation() string {
	if o == nil || IsNil(o.HostingLocation) {
		var ret string
		return ret
	}
	return *o.HostingLocation
}

// GetHostingLocationOk returns a tuple with the HostingLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ToolFunction) GetHostingLocationOk() (*string, bool) {
	if o == nil || IsNil(o.HostingLocation) {
		return nil, false
	}
	return o.HostingLocation, true
}

// HasHostingLocation returns a boolean if a field has been set.
func (o *ToolFunction) HasHostingLocation() bool {
	if o != nil && !IsNil(o.HostingLocation) {
		return true
	}

	return false
}

// SetHostingLocation gets a reference to the given string and assigns it to the HostingLocation field.
func (o *ToolFunction) SetHostingLocation(v string) {
	o.HostingLocation = &v
}

// GetI18n returns the I18n field value if set, zero value otherwise.
func (o *ToolFunction) GetI18n() map[string]ToolI18n {
	if o == nil || IsNil(o.I18n) {
		var ret map[string]ToolI18n
		return ret
	}
	return *o.I18n
}

// GetI18nOk returns a tuple with the I18n field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ToolFunction) GetI18nOk() (*map[string]ToolI18n, bool) {
	if o == nil || IsNil(o.I18n) {
		return nil, false
	}
	return o.I18n, true
}

// HasI18n returns a boolean if a field has been set.
func (o *ToolFunction) HasI18n() bool {
	if o != nil && !IsNil(o.I18n) {
		return true
	}

	return false
}

// SetI18n gets a reference to the given map[string]ToolI18n and assigns it to the I18n field.
func (o *ToolFunction) SetI18n(v map[string]ToolI18n) {
	o.I18n = &v
}

// GetIcon returns the Icon field value if set, zero value otherwise.
func (o *ToolFunction) GetIcon() string {
	if o == nil || IsNil(o.Icon) {
		var ret string
		return ret
	}
	return *o.Icon
}

// GetIconOk returns a tuple with the Icon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ToolFunction) GetIconOk() (*string, bool) {
	if o == nil || IsNil(o.Icon) {
		return nil, false
	}
	return o.Icon, true
}

// HasIcon returns a boolean if a field has been set.
func (o *ToolFunction) HasIcon() bool {
	if o != nil && !IsNil(o.Icon) {
		return true
	}

	return false
}

// SetIcon gets a reference to the given string and assigns it to the Icon field.
func (o *ToolFunction) SetIcon(v string) {
	o.Icon = &v
}

// GetId returns the Id field value
func (o *ToolFunction) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ToolFunction) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ToolFunction) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *ToolFunction) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ToolFunction) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ToolFunction) SetName(v string) {
	o.Name = v
}

// GetParameters returns the Parameters field value if set, zero value otherwise.
func (o *ToolFunction) GetParameters() string {
	if o == nil || IsNil(o.Parameters) {
		var ret string
		return ret
	}
	return *o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ToolFunction) GetParametersOk() (*string, bool) {
	if o == nil || IsNil(o.Parameters) {
		return nil, false
	}
	return o.Parameters, true
}

// HasParameters returns a boolean if a field has been set.
func (o *ToolFunction) HasParameters() bool {
	if o != nil && !IsNil(o.Parameters) {
		return true
	}

	return false
}

// SetParameters gets a reference to the given string and assigns it to the Parameters field.
func (o *ToolFunction) SetParameters(v string) {
	o.Parameters = &v
}

// GetResponseVisible returns the ResponseVisible field value
func (o *ToolFunction) GetResponseVisible() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ResponseVisible
}

// GetResponseVisibleOk returns a tuple with the ResponseVisible field value
// and a boolean to check if the value has been set.
func (o *ToolFunction) GetResponseVisibleOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResponseVisible, true
}

// SetResponseVisible sets field value
func (o *ToolFunction) SetResponseVisible(v bool) {
	o.ResponseVisible = v
}

// GetToolId returns the ToolId field value
func (o *ToolFunction) GetToolId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ToolId
}

// GetToolIdOk returns a tuple with the ToolId field value
// and a boolean to check if the value has been set.
func (o *ToolFunction) GetToolIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ToolId, true
}

// SetToolId sets field value
func (o *ToolFunction) SetToolId(v string) {
	o.ToolId = v
}

// GetVersion returns the Version field value
func (o *ToolFunction) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *ToolFunction) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *ToolFunction) SetVersion(v string) {
	o.Version = v
}

func (o ToolFunction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ToolFunction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.HostingLocation) {
		toSerialize["hosting_location"] = o.HostingLocation
	}
	if !IsNil(o.I18n) {
		toSerialize["i18n"] = o.I18n
	}
	if !IsNil(o.Icon) {
		toSerialize["icon"] = o.Icon
	}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	if !IsNil(o.Parameters) {
		toSerialize["parameters"] = o.Parameters
	}
	toSerialize["response_visible"] = o.ResponseVisible
	toSerialize["tool_id"] = o.ToolId
	toSerialize["version"] = o.Version

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ToolFunction) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"response_visible",
		"tool_id",
		"version",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varToolFunction := _ToolFunction{}

	err = json.Unmarshal(data, &varToolFunction)

	if err != nil {
		return err
	}

	*o = ToolFunction(varToolFunction)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "description")
		delete(additionalProperties, "hosting_location")
		delete(additionalProperties, "i18n")
		delete(additionalProperties, "icon")
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "parameters")
		delete(additionalProperties, "response_visible")
		delete(additionalProperties, "tool_id")
		delete(additionalProperties, "version")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableToolFunction struct {
	value *ToolFunction
	isSet bool
}

func (v NullableToolFunction) Get() *ToolFunction {
	return v.value
}

func (v *NullableToolFunction) Set(val *ToolFunction) {
	v.value = val
	v.isSet = true
}

func (v NullableToolFunction) IsSet() bool {
	return v.isSet
}

func (v *NullableToolFunction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableToolFunction(val *ToolFunction) *NullableToolFunction {
	return &NullableToolFunction{value: val, isSet: true}
}

func (v NullableToolFunction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableToolFunction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


