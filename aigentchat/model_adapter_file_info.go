/*
vAudience AIgentChat API

chat and api server for AIgents

API version: 0.13.3
Contact: contact@vaudience.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aigentchat

import (
	"encoding/json"
)

// checks if the AdapterFileInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdapterFileInfo{}

// AdapterFileInfo struct for AdapterFileInfo
type AdapterFileInfo struct {
	FileName *string `json:"file_name,omitempty"`
	FileSize *int64 `json:"file_size,omitempty"`
	LocalPath *string `json:"local_path,omitempty"`
	MimeType *string `json:"mime_type,omitempty"`
	Url *string `json:"url,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AdapterFileInfo AdapterFileInfo

// NewAdapterFileInfo instantiates a new AdapterFileInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdapterFileInfo() *AdapterFileInfo {
	this := AdapterFileInfo{}
	return &this
}

// NewAdapterFileInfoWithDefaults instantiates a new AdapterFileInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdapterFileInfoWithDefaults() *AdapterFileInfo {
	this := AdapterFileInfo{}
	return &this
}

// GetFileName returns the FileName field value if set, zero value otherwise.
func (o *AdapterFileInfo) GetFileName() string {
	if o == nil || IsNil(o.FileName) {
		var ret string
		return ret
	}
	return *o.FileName
}

// GetFileNameOk returns a tuple with the FileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdapterFileInfo) GetFileNameOk() (*string, bool) {
	if o == nil || IsNil(o.FileName) {
		return nil, false
	}
	return o.FileName, true
}

// HasFileName returns a boolean if a field has been set.
func (o *AdapterFileInfo) HasFileName() bool {
	if o != nil && !IsNil(o.FileName) {
		return true
	}

	return false
}

// SetFileName gets a reference to the given string and assigns it to the FileName field.
func (o *AdapterFileInfo) SetFileName(v string) {
	o.FileName = &v
}

// GetFileSize returns the FileSize field value if set, zero value otherwise.
func (o *AdapterFileInfo) GetFileSize() int64 {
	if o == nil || IsNil(o.FileSize) {
		var ret int64
		return ret
	}
	return *o.FileSize
}

// GetFileSizeOk returns a tuple with the FileSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdapterFileInfo) GetFileSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.FileSize) {
		return nil, false
	}
	return o.FileSize, true
}

// HasFileSize returns a boolean if a field has been set.
func (o *AdapterFileInfo) HasFileSize() bool {
	if o != nil && !IsNil(o.FileSize) {
		return true
	}

	return false
}

// SetFileSize gets a reference to the given int64 and assigns it to the FileSize field.
func (o *AdapterFileInfo) SetFileSize(v int64) {
	o.FileSize = &v
}

// GetLocalPath returns the LocalPath field value if set, zero value otherwise.
func (o *AdapterFileInfo) GetLocalPath() string {
	if o == nil || IsNil(o.LocalPath) {
		var ret string
		return ret
	}
	return *o.LocalPath
}

// GetLocalPathOk returns a tuple with the LocalPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdapterFileInfo) GetLocalPathOk() (*string, bool) {
	if o == nil || IsNil(o.LocalPath) {
		return nil, false
	}
	return o.LocalPath, true
}

// HasLocalPath returns a boolean if a field has been set.
func (o *AdapterFileInfo) HasLocalPath() bool {
	if o != nil && !IsNil(o.LocalPath) {
		return true
	}

	return false
}

// SetLocalPath gets a reference to the given string and assigns it to the LocalPath field.
func (o *AdapterFileInfo) SetLocalPath(v string) {
	o.LocalPath = &v
}

// GetMimeType returns the MimeType field value if set, zero value otherwise.
func (o *AdapterFileInfo) GetMimeType() string {
	if o == nil || IsNil(o.MimeType) {
		var ret string
		return ret
	}
	return *o.MimeType
}

// GetMimeTypeOk returns a tuple with the MimeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdapterFileInfo) GetMimeTypeOk() (*string, bool) {
	if o == nil || IsNil(o.MimeType) {
		return nil, false
	}
	return o.MimeType, true
}

// HasMimeType returns a boolean if a field has been set.
func (o *AdapterFileInfo) HasMimeType() bool {
	if o != nil && !IsNil(o.MimeType) {
		return true
	}

	return false
}

// SetMimeType gets a reference to the given string and assigns it to the MimeType field.
func (o *AdapterFileInfo) SetMimeType(v string) {
	o.MimeType = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *AdapterFileInfo) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdapterFileInfo) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *AdapterFileInfo) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *AdapterFileInfo) SetUrl(v string) {
	o.Url = &v
}

func (o AdapterFileInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdapterFileInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FileName) {
		toSerialize["file_name"] = o.FileName
	}
	if !IsNil(o.FileSize) {
		toSerialize["file_size"] = o.FileSize
	}
	if !IsNil(o.LocalPath) {
		toSerialize["local_path"] = o.LocalPath
	}
	if !IsNil(o.MimeType) {
		toSerialize["mime_type"] = o.MimeType
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AdapterFileInfo) UnmarshalJSON(data []byte) (err error) {
	varAdapterFileInfo := _AdapterFileInfo{}

	err = json.Unmarshal(data, &varAdapterFileInfo)

	if err != nil {
		return err
	}

	*o = AdapterFileInfo(varAdapterFileInfo)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "file_name")
		delete(additionalProperties, "file_size")
		delete(additionalProperties, "local_path")
		delete(additionalProperties, "mime_type")
		delete(additionalProperties, "url")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAdapterFileInfo struct {
	value *AdapterFileInfo
	isSet bool
}

func (v NullableAdapterFileInfo) Get() *AdapterFileInfo {
	return v.value
}

func (v *NullableAdapterFileInfo) Set(val *AdapterFileInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableAdapterFileInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableAdapterFileInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdapterFileInfo(val *AdapterFileInfo) *NullableAdapterFileInfo {
	return &NullableAdapterFileInfo{value: val, isSet: true}
}

func (v NullableAdapterFileInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdapterFileInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


