/*
vAudience AIgentChat API

chat and api server for AIgents

API version: 0.20.10
Contact: contact@vaudience.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aigentchat

import (
	"encoding/json"
	"fmt"
)

// AbilityType the model 'AbilityType'
type AbilityType string

// List of AbilityType
const (
	AbilityTypeText AbilityType = "text"
	AbilityTypeChat AbilityType = "chat"
	AbilityTypeEmbedding AbilityType = "embedding"
	AbilityTypeImage AbilityType = "image"
	AbilityTypeToolFunction AbilityType = "tool-function"
)

// All allowed values of AbilityType enum
var AllowedAbilityTypeEnumValues = []AbilityType{
	"text",
	"chat",
	"embedding",
	"image",
	"tool-function",
}

func (v *AbilityType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AbilityType(value)
	for _, existing := range AllowedAbilityTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AbilityType", value)
}

// NewAbilityTypeFromValue returns a pointer to a valid AbilityType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAbilityTypeFromValue(v string) (*AbilityType, error) {
	ev := AbilityType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AbilityType: valid values are %v", v, AllowedAbilityTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AbilityType) IsValid() bool {
	for _, existing := range AllowedAbilityTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AbilityType value
func (v AbilityType) Ptr() *AbilityType {
	return &v
}

type NullableAbilityType struct {
	value *AbilityType
	isSet bool
}

func (v NullableAbilityType) Get() *AbilityType {
	return v.value
}

func (v *NullableAbilityType) Set(val *AbilityType) {
	v.value = val
	v.isSet = true
}

func (v NullableAbilityType) IsSet() bool {
	return v.isSet
}

func (v *NullableAbilityType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAbilityType(val *AbilityType) *NullableAbilityType {
	return &NullableAbilityType{value: val, isSet: true}
}

func (v NullableAbilityType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAbilityType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

