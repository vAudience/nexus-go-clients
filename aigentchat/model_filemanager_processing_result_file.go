/*
vAudience AIgentChat API

chat and api server for AIgents

API version: 0.13.3
Contact: contact@vaudience.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aigentchat

import (
	"encoding/json"
)

// checks if the FilemanagerProcessingResultFile type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FilemanagerProcessingResultFile{}

// FilemanagerProcessingResultFile struct for FilemanagerProcessingResultFile
type FilemanagerProcessingResultFile struct {
	FileName *string `json:"fileName,omitempty"`
	FileSize *int32 `json:"fileSize,omitempty"`
	LocalFilePath *string `json:"localFilePath,omitempty"`
	MimeType *string `json:"mimeType,omitempty"`
	Url *string `json:"url,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _FilemanagerProcessingResultFile FilemanagerProcessingResultFile

// NewFilemanagerProcessingResultFile instantiates a new FilemanagerProcessingResultFile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilemanagerProcessingResultFile() *FilemanagerProcessingResultFile {
	this := FilemanagerProcessingResultFile{}
	return &this
}

// NewFilemanagerProcessingResultFileWithDefaults instantiates a new FilemanagerProcessingResultFile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilemanagerProcessingResultFileWithDefaults() *FilemanagerProcessingResultFile {
	this := FilemanagerProcessingResultFile{}
	return &this
}

// GetFileName returns the FileName field value if set, zero value otherwise.
func (o *FilemanagerProcessingResultFile) GetFileName() string {
	if o == nil || IsNil(o.FileName) {
		var ret string
		return ret
	}
	return *o.FileName
}

// GetFileNameOk returns a tuple with the FileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilemanagerProcessingResultFile) GetFileNameOk() (*string, bool) {
	if o == nil || IsNil(o.FileName) {
		return nil, false
	}
	return o.FileName, true
}

// HasFileName returns a boolean if a field has been set.
func (o *FilemanagerProcessingResultFile) HasFileName() bool {
	if o != nil && !IsNil(o.FileName) {
		return true
	}

	return false
}

// SetFileName gets a reference to the given string and assigns it to the FileName field.
func (o *FilemanagerProcessingResultFile) SetFileName(v string) {
	o.FileName = &v
}

// GetFileSize returns the FileSize field value if set, zero value otherwise.
func (o *FilemanagerProcessingResultFile) GetFileSize() int32 {
	if o == nil || IsNil(o.FileSize) {
		var ret int32
		return ret
	}
	return *o.FileSize
}

// GetFileSizeOk returns a tuple with the FileSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilemanagerProcessingResultFile) GetFileSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.FileSize) {
		return nil, false
	}
	return o.FileSize, true
}

// HasFileSize returns a boolean if a field has been set.
func (o *FilemanagerProcessingResultFile) HasFileSize() bool {
	if o != nil && !IsNil(o.FileSize) {
		return true
	}

	return false
}

// SetFileSize gets a reference to the given int32 and assigns it to the FileSize field.
func (o *FilemanagerProcessingResultFile) SetFileSize(v int32) {
	o.FileSize = &v
}

// GetLocalFilePath returns the LocalFilePath field value if set, zero value otherwise.
func (o *FilemanagerProcessingResultFile) GetLocalFilePath() string {
	if o == nil || IsNil(o.LocalFilePath) {
		var ret string
		return ret
	}
	return *o.LocalFilePath
}

// GetLocalFilePathOk returns a tuple with the LocalFilePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilemanagerProcessingResultFile) GetLocalFilePathOk() (*string, bool) {
	if o == nil || IsNil(o.LocalFilePath) {
		return nil, false
	}
	return o.LocalFilePath, true
}

// HasLocalFilePath returns a boolean if a field has been set.
func (o *FilemanagerProcessingResultFile) HasLocalFilePath() bool {
	if o != nil && !IsNil(o.LocalFilePath) {
		return true
	}

	return false
}

// SetLocalFilePath gets a reference to the given string and assigns it to the LocalFilePath field.
func (o *FilemanagerProcessingResultFile) SetLocalFilePath(v string) {
	o.LocalFilePath = &v
}

// GetMimeType returns the MimeType field value if set, zero value otherwise.
func (o *FilemanagerProcessingResultFile) GetMimeType() string {
	if o == nil || IsNil(o.MimeType) {
		var ret string
		return ret
	}
	return *o.MimeType
}

// GetMimeTypeOk returns a tuple with the MimeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilemanagerProcessingResultFile) GetMimeTypeOk() (*string, bool) {
	if o == nil || IsNil(o.MimeType) {
		return nil, false
	}
	return o.MimeType, true
}

// HasMimeType returns a boolean if a field has been set.
func (o *FilemanagerProcessingResultFile) HasMimeType() bool {
	if o != nil && !IsNil(o.MimeType) {
		return true
	}

	return false
}

// SetMimeType gets a reference to the given string and assigns it to the MimeType field.
func (o *FilemanagerProcessingResultFile) SetMimeType(v string) {
	o.MimeType = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *FilemanagerProcessingResultFile) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilemanagerProcessingResultFile) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *FilemanagerProcessingResultFile) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *FilemanagerProcessingResultFile) SetUrl(v string) {
	o.Url = &v
}

func (o FilemanagerProcessingResultFile) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FilemanagerProcessingResultFile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FileName) {
		toSerialize["fileName"] = o.FileName
	}
	if !IsNil(o.FileSize) {
		toSerialize["fileSize"] = o.FileSize
	}
	if !IsNil(o.LocalFilePath) {
		toSerialize["localFilePath"] = o.LocalFilePath
	}
	if !IsNil(o.MimeType) {
		toSerialize["mimeType"] = o.MimeType
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FilemanagerProcessingResultFile) UnmarshalJSON(data []byte) (err error) {
	varFilemanagerProcessingResultFile := _FilemanagerProcessingResultFile{}

	err = json.Unmarshal(data, &varFilemanagerProcessingResultFile)

	if err != nil {
		return err
	}

	*o = FilemanagerProcessingResultFile(varFilemanagerProcessingResultFile)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "fileName")
		delete(additionalProperties, "fileSize")
		delete(additionalProperties, "localFilePath")
		delete(additionalProperties, "mimeType")
		delete(additionalProperties, "url")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFilemanagerProcessingResultFile struct {
	value *FilemanagerProcessingResultFile
	isSet bool
}

func (v NullableFilemanagerProcessingResultFile) Get() *FilemanagerProcessingResultFile {
	return v.value
}

func (v *NullableFilemanagerProcessingResultFile) Set(val *FilemanagerProcessingResultFile) {
	v.value = val
	v.isSet = true
}

func (v NullableFilemanagerProcessingResultFile) IsSet() bool {
	return v.isSet
}

func (v *NullableFilemanagerProcessingResultFile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilemanagerProcessingResultFile(val *FilemanagerProcessingResultFile) *NullableFilemanagerProcessingResultFile {
	return &NullableFilemanagerProcessingResultFile{value: val, isSet: true}
}

func (v NullableFilemanagerProcessingResultFile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilemanagerProcessingResultFile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


