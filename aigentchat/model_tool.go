/*
vAudience AIgentChat API

chat and api server for AIgents

API version: 0.20.0
Contact: contact@vaudience.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aigentchat

import (
	"encoding/json"
	"fmt"
)

// checks if the Tool type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Tool{}

// Tool struct for Tool
type Tool struct {
	Description *string `json:"description,omitempty"`
	Functions []ToolFunction `json:"functions"`
	HostingLocations []string `json:"hosting_locations,omitempty"`
	I18n *map[string]ToolI18n `json:"i18n,omitempty"`
	Icon *string `json:"icon,omitempty"`
	Id string `json:"id"`
	IsPublic bool `json:"is_public"`
	Name string `json:"name"`
	Version string `json:"version"`
	AdditionalProperties map[string]interface{}
}

type _Tool Tool

// NewTool instantiates a new Tool object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTool(functions []ToolFunction, id string, isPublic bool, name string, version string) *Tool {
	this := Tool{}
	this.Functions = functions
	this.Id = id
	this.IsPublic = isPublic
	this.Name = name
	this.Version = version
	return &this
}

// NewToolWithDefaults instantiates a new Tool object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewToolWithDefaults() *Tool {
	this := Tool{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Tool) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tool) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Tool) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Tool) SetDescription(v string) {
	o.Description = &v
}

// GetFunctions returns the Functions field value
func (o *Tool) GetFunctions() []ToolFunction {
	if o == nil {
		var ret []ToolFunction
		return ret
	}

	return o.Functions
}

// GetFunctionsOk returns a tuple with the Functions field value
// and a boolean to check if the value has been set.
func (o *Tool) GetFunctionsOk() ([]ToolFunction, bool) {
	if o == nil {
		return nil, false
	}
	return o.Functions, true
}

// SetFunctions sets field value
func (o *Tool) SetFunctions(v []ToolFunction) {
	o.Functions = v
}

// GetHostingLocations returns the HostingLocations field value if set, zero value otherwise.
func (o *Tool) GetHostingLocations() []string {
	if o == nil || IsNil(o.HostingLocations) {
		var ret []string
		return ret
	}
	return o.HostingLocations
}

// GetHostingLocationsOk returns a tuple with the HostingLocations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tool) GetHostingLocationsOk() ([]string, bool) {
	if o == nil || IsNil(o.HostingLocations) {
		return nil, false
	}
	return o.HostingLocations, true
}

// HasHostingLocations returns a boolean if a field has been set.
func (o *Tool) HasHostingLocations() bool {
	if o != nil && !IsNil(o.HostingLocations) {
		return true
	}

	return false
}

// SetHostingLocations gets a reference to the given []string and assigns it to the HostingLocations field.
func (o *Tool) SetHostingLocations(v []string) {
	o.HostingLocations = v
}

// GetI18n returns the I18n field value if set, zero value otherwise.
func (o *Tool) GetI18n() map[string]ToolI18n {
	if o == nil || IsNil(o.I18n) {
		var ret map[string]ToolI18n
		return ret
	}
	return *o.I18n
}

// GetI18nOk returns a tuple with the I18n field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tool) GetI18nOk() (*map[string]ToolI18n, bool) {
	if o == nil || IsNil(o.I18n) {
		return nil, false
	}
	return o.I18n, true
}

// HasI18n returns a boolean if a field has been set.
func (o *Tool) HasI18n() bool {
	if o != nil && !IsNil(o.I18n) {
		return true
	}

	return false
}

// SetI18n gets a reference to the given map[string]ToolI18n and assigns it to the I18n field.
func (o *Tool) SetI18n(v map[string]ToolI18n) {
	o.I18n = &v
}

// GetIcon returns the Icon field value if set, zero value otherwise.
func (o *Tool) GetIcon() string {
	if o == nil || IsNil(o.Icon) {
		var ret string
		return ret
	}
	return *o.Icon
}

// GetIconOk returns a tuple with the Icon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tool) GetIconOk() (*string, bool) {
	if o == nil || IsNil(o.Icon) {
		return nil, false
	}
	return o.Icon, true
}

// HasIcon returns a boolean if a field has been set.
func (o *Tool) HasIcon() bool {
	if o != nil && !IsNil(o.Icon) {
		return true
	}

	return false
}

// SetIcon gets a reference to the given string and assigns it to the Icon field.
func (o *Tool) SetIcon(v string) {
	o.Icon = &v
}

// GetId returns the Id field value
func (o *Tool) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Tool) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Tool) SetId(v string) {
	o.Id = v
}

// GetIsPublic returns the IsPublic field value
func (o *Tool) GetIsPublic() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsPublic
}

// GetIsPublicOk returns a tuple with the IsPublic field value
// and a boolean to check if the value has been set.
func (o *Tool) GetIsPublicOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsPublic, true
}

// SetIsPublic sets field value
func (o *Tool) SetIsPublic(v bool) {
	o.IsPublic = v
}

// GetName returns the Name field value
func (o *Tool) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Tool) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Tool) SetName(v string) {
	o.Name = v
}

// GetVersion returns the Version field value
func (o *Tool) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *Tool) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *Tool) SetVersion(v string) {
	o.Version = v
}

func (o Tool) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Tool) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["functions"] = o.Functions
	if !IsNil(o.HostingLocations) {
		toSerialize["hosting_locations"] = o.HostingLocations
	}
	if !IsNil(o.I18n) {
		toSerialize["i18n"] = o.I18n
	}
	if !IsNil(o.Icon) {
		toSerialize["icon"] = o.Icon
	}
	toSerialize["id"] = o.Id
	toSerialize["is_public"] = o.IsPublic
	toSerialize["name"] = o.Name
	toSerialize["version"] = o.Version

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Tool) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"functions",
		"id",
		"is_public",
		"name",
		"version",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTool := _Tool{}

	err = json.Unmarshal(data, &varTool)

	if err != nil {
		return err
	}

	*o = Tool(varTool)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "description")
		delete(additionalProperties, "functions")
		delete(additionalProperties, "hosting_locations")
		delete(additionalProperties, "i18n")
		delete(additionalProperties, "icon")
		delete(additionalProperties, "id")
		delete(additionalProperties, "is_public")
		delete(additionalProperties, "name")
		delete(additionalProperties, "version")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTool struct {
	value *Tool
	isSet bool
}

func (v NullableTool) Get() *Tool {
	return v.value
}

func (v *NullableTool) Set(val *Tool) {
	v.value = val
	v.isSet = true
}

func (v NullableTool) IsSet() bool {
	return v.isSet
}

func (v *NullableTool) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTool(val *Tool) *NullableTool {
	return &NullableTool{value: val, isSet: true}
}

func (v NullableTool) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTool) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


