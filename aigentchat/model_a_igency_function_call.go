/*
vAudience AIgentChat API

chat and api server for AIgents

API version: 0.18.2
Contact: contact@vaudience.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aigentchat

import (
	"encoding/json"
	"fmt"
)

// checks if the AIgencyFunctionCall type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AIgencyFunctionCall{}

// AIgencyFunctionCall struct for AIgencyFunctionCall
type AIgencyFunctionCall struct {
	Arguments map[string]interface{} `json:"arguments,omitempty"`
	FunctionName string `json:"function_name"`
	Id string `json:"id"`
	AdditionalProperties map[string]interface{}
}

type _AIgencyFunctionCall AIgencyFunctionCall

// NewAIgencyFunctionCall instantiates a new AIgencyFunctionCall object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAIgencyFunctionCall(functionName string, id string) *AIgencyFunctionCall {
	this := AIgencyFunctionCall{}
	this.FunctionName = functionName
	this.Id = id
	return &this
}

// NewAIgencyFunctionCallWithDefaults instantiates a new AIgencyFunctionCall object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAIgencyFunctionCallWithDefaults() *AIgencyFunctionCall {
	this := AIgencyFunctionCall{}
	return &this
}

// GetArguments returns the Arguments field value if set, zero value otherwise.
func (o *AIgencyFunctionCall) GetArguments() map[string]interface{} {
	if o == nil || IsNil(o.Arguments) {
		var ret map[string]interface{}
		return ret
	}
	return o.Arguments
}

// GetArgumentsOk returns a tuple with the Arguments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AIgencyFunctionCall) GetArgumentsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Arguments) {
		return map[string]interface{}{}, false
	}
	return o.Arguments, true
}

// HasArguments returns a boolean if a field has been set.
func (o *AIgencyFunctionCall) HasArguments() bool {
	if o != nil && !IsNil(o.Arguments) {
		return true
	}

	return false
}

// SetArguments gets a reference to the given map[string]interface{} and assigns it to the Arguments field.
func (o *AIgencyFunctionCall) SetArguments(v map[string]interface{}) {
	o.Arguments = v
}

// GetFunctionName returns the FunctionName field value
func (o *AIgencyFunctionCall) GetFunctionName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FunctionName
}

// GetFunctionNameOk returns a tuple with the FunctionName field value
// and a boolean to check if the value has been set.
func (o *AIgencyFunctionCall) GetFunctionNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FunctionName, true
}

// SetFunctionName sets field value
func (o *AIgencyFunctionCall) SetFunctionName(v string) {
	o.FunctionName = v
}

// GetId returns the Id field value
func (o *AIgencyFunctionCall) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *AIgencyFunctionCall) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *AIgencyFunctionCall) SetId(v string) {
	o.Id = v
}

func (o AIgencyFunctionCall) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AIgencyFunctionCall) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Arguments) {
		toSerialize["arguments"] = o.Arguments
	}
	toSerialize["function_name"] = o.FunctionName
	toSerialize["id"] = o.Id

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AIgencyFunctionCall) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"function_name",
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAIgencyFunctionCall := _AIgencyFunctionCall{}

	err = json.Unmarshal(data, &varAIgencyFunctionCall)

	if err != nil {
		return err
	}

	*o = AIgencyFunctionCall(varAIgencyFunctionCall)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "arguments")
		delete(additionalProperties, "function_name")
		delete(additionalProperties, "id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAIgencyFunctionCall struct {
	value *AIgencyFunctionCall
	isSet bool
}

func (v NullableAIgencyFunctionCall) Get() *AIgencyFunctionCall {
	return v.value
}

func (v *NullableAIgencyFunctionCall) Set(val *AIgencyFunctionCall) {
	v.value = val
	v.isSet = true
}

func (v NullableAIgencyFunctionCall) IsSet() bool {
	return v.isSet
}

func (v *NullableAIgencyFunctionCall) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAIgencyFunctionCall(val *AIgencyFunctionCall) *NullableAIgencyFunctionCall {
	return &NullableAIgencyFunctionCall{value: val, isSet: true}
}

func (v NullableAIgencyFunctionCall) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAIgencyFunctionCall) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


