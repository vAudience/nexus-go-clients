/*
vAudience AIgentChat API

chat and api server for AIgents

API version: 0.13.3
Contact: contact@vaudience.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aigentchat

import (
	"encoding/json"
)

// checks if the FileUploadResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FileUploadResponse{}

// FileUploadResponse struct for FileUploadResponse
type FileUploadResponse struct {
	IncomingFileName *string `json:"incomingFileName,omitempty"`
	ProcessingError *string `json:"processingError,omitempty"`
	ResultingFiles []FilemanagerProcessingResultFile `json:"resultingFiles,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _FileUploadResponse FileUploadResponse

// NewFileUploadResponse instantiates a new FileUploadResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileUploadResponse() *FileUploadResponse {
	this := FileUploadResponse{}
	return &this
}

// NewFileUploadResponseWithDefaults instantiates a new FileUploadResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileUploadResponseWithDefaults() *FileUploadResponse {
	this := FileUploadResponse{}
	return &this
}

// GetIncomingFileName returns the IncomingFileName field value if set, zero value otherwise.
func (o *FileUploadResponse) GetIncomingFileName() string {
	if o == nil || IsNil(o.IncomingFileName) {
		var ret string
		return ret
	}
	return *o.IncomingFileName
}

// GetIncomingFileNameOk returns a tuple with the IncomingFileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileUploadResponse) GetIncomingFileNameOk() (*string, bool) {
	if o == nil || IsNil(o.IncomingFileName) {
		return nil, false
	}
	return o.IncomingFileName, true
}

// HasIncomingFileName returns a boolean if a field has been set.
func (o *FileUploadResponse) HasIncomingFileName() bool {
	if o != nil && !IsNil(o.IncomingFileName) {
		return true
	}

	return false
}

// SetIncomingFileName gets a reference to the given string and assigns it to the IncomingFileName field.
func (o *FileUploadResponse) SetIncomingFileName(v string) {
	o.IncomingFileName = &v
}

// GetProcessingError returns the ProcessingError field value if set, zero value otherwise.
func (o *FileUploadResponse) GetProcessingError() string {
	if o == nil || IsNil(o.ProcessingError) {
		var ret string
		return ret
	}
	return *o.ProcessingError
}

// GetProcessingErrorOk returns a tuple with the ProcessingError field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileUploadResponse) GetProcessingErrorOk() (*string, bool) {
	if o == nil || IsNil(o.ProcessingError) {
		return nil, false
	}
	return o.ProcessingError, true
}

// HasProcessingError returns a boolean if a field has been set.
func (o *FileUploadResponse) HasProcessingError() bool {
	if o != nil && !IsNil(o.ProcessingError) {
		return true
	}

	return false
}

// SetProcessingError gets a reference to the given string and assigns it to the ProcessingError field.
func (o *FileUploadResponse) SetProcessingError(v string) {
	o.ProcessingError = &v
}

// GetResultingFiles returns the ResultingFiles field value if set, zero value otherwise.
func (o *FileUploadResponse) GetResultingFiles() []FilemanagerProcessingResultFile {
	if o == nil || IsNil(o.ResultingFiles) {
		var ret []FilemanagerProcessingResultFile
		return ret
	}
	return o.ResultingFiles
}

// GetResultingFilesOk returns a tuple with the ResultingFiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileUploadResponse) GetResultingFilesOk() ([]FilemanagerProcessingResultFile, bool) {
	if o == nil || IsNil(o.ResultingFiles) {
		return nil, false
	}
	return o.ResultingFiles, true
}

// HasResultingFiles returns a boolean if a field has been set.
func (o *FileUploadResponse) HasResultingFiles() bool {
	if o != nil && !IsNil(o.ResultingFiles) {
		return true
	}

	return false
}

// SetResultingFiles gets a reference to the given []FilemanagerProcessingResultFile and assigns it to the ResultingFiles field.
func (o *FileUploadResponse) SetResultingFiles(v []FilemanagerProcessingResultFile) {
	o.ResultingFiles = v
}

func (o FileUploadResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FileUploadResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IncomingFileName) {
		toSerialize["incomingFileName"] = o.IncomingFileName
	}
	if !IsNil(o.ProcessingError) {
		toSerialize["processingError"] = o.ProcessingError
	}
	if !IsNil(o.ResultingFiles) {
		toSerialize["resultingFiles"] = o.ResultingFiles
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FileUploadResponse) UnmarshalJSON(data []byte) (err error) {
	varFileUploadResponse := _FileUploadResponse{}

	err = json.Unmarshal(data, &varFileUploadResponse)

	if err != nil {
		return err
	}

	*o = FileUploadResponse(varFileUploadResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "incomingFileName")
		delete(additionalProperties, "processingError")
		delete(additionalProperties, "resultingFiles")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFileUploadResponse struct {
	value *FileUploadResponse
	isSet bool
}

func (v NullableFileUploadResponse) Get() *FileUploadResponse {
	return v.value
}

func (v *NullableFileUploadResponse) Set(val *FileUploadResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableFileUploadResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableFileUploadResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileUploadResponse(val *FileUploadResponse) *NullableFileUploadResponse {
	return &NullableFileUploadResponse{value: val, isSet: true}
}

func (v NullableFileUploadResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileUploadResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


