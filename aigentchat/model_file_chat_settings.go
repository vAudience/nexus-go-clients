/*
vAudience AIgentChat API

chat and api server for AIgents

API version: 0.15.9
Contact: contact@vaudience.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aigentchat

import (
	"encoding/json"
)

// checks if the FileChatSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FileChatSettings{}

// FileChatSettings struct for FileChatSettings
type FileChatSettings struct {
	MaxFiles *int32 `json:"max_files,omitempty"`
	MaxTotalFileSize *int64 `json:"max_total_file_size,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _FileChatSettings FileChatSettings

// NewFileChatSettings instantiates a new FileChatSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileChatSettings() *FileChatSettings {
	this := FileChatSettings{}
	return &this
}

// NewFileChatSettingsWithDefaults instantiates a new FileChatSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileChatSettingsWithDefaults() *FileChatSettings {
	this := FileChatSettings{}
	return &this
}

// GetMaxFiles returns the MaxFiles field value if set, zero value otherwise.
func (o *FileChatSettings) GetMaxFiles() int32 {
	if o == nil || IsNil(o.MaxFiles) {
		var ret int32
		return ret
	}
	return *o.MaxFiles
}

// GetMaxFilesOk returns a tuple with the MaxFiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileChatSettings) GetMaxFilesOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxFiles) {
		return nil, false
	}
	return o.MaxFiles, true
}

// HasMaxFiles returns a boolean if a field has been set.
func (o *FileChatSettings) HasMaxFiles() bool {
	if o != nil && !IsNil(o.MaxFiles) {
		return true
	}

	return false
}

// SetMaxFiles gets a reference to the given int32 and assigns it to the MaxFiles field.
func (o *FileChatSettings) SetMaxFiles(v int32) {
	o.MaxFiles = &v
}

// GetMaxTotalFileSize returns the MaxTotalFileSize field value if set, zero value otherwise.
func (o *FileChatSettings) GetMaxTotalFileSize() int64 {
	if o == nil || IsNil(o.MaxTotalFileSize) {
		var ret int64
		return ret
	}
	return *o.MaxTotalFileSize
}

// GetMaxTotalFileSizeOk returns a tuple with the MaxTotalFileSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileChatSettings) GetMaxTotalFileSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxTotalFileSize) {
		return nil, false
	}
	return o.MaxTotalFileSize, true
}

// HasMaxTotalFileSize returns a boolean if a field has been set.
func (o *FileChatSettings) HasMaxTotalFileSize() bool {
	if o != nil && !IsNil(o.MaxTotalFileSize) {
		return true
	}

	return false
}

// SetMaxTotalFileSize gets a reference to the given int64 and assigns it to the MaxTotalFileSize field.
func (o *FileChatSettings) SetMaxTotalFileSize(v int64) {
	o.MaxTotalFileSize = &v
}

func (o FileChatSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FileChatSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MaxFiles) {
		toSerialize["max_files"] = o.MaxFiles
	}
	if !IsNil(o.MaxTotalFileSize) {
		toSerialize["max_total_file_size"] = o.MaxTotalFileSize
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FileChatSettings) UnmarshalJSON(data []byte) (err error) {
	varFileChatSettings := _FileChatSettings{}

	err = json.Unmarshal(data, &varFileChatSettings)

	if err != nil {
		return err
	}

	*o = FileChatSettings(varFileChatSettings)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "max_files")
		delete(additionalProperties, "max_total_file_size")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFileChatSettings struct {
	value *FileChatSettings
	isSet bool
}

func (v NullableFileChatSettings) Get() *FileChatSettings {
	return v.value
}

func (v *NullableFileChatSettings) Set(val *FileChatSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableFileChatSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableFileChatSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileChatSettings(val *FileChatSettings) *NullableFileChatSettings {
	return &NullableFileChatSettings{value: val, isSet: true}
}

func (v NullableFileChatSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileChatSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


