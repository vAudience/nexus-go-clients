/*
vAudience AIgentChat API

chat and api server for AIgents

API version: 0.20.10
Contact: contact@vaudience.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aigentchat

import (
	"encoding/json"
)

// checks if the CostTrackingResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CostTrackingResponse{}

// CostTrackingResponse struct for CostTrackingResponse
type CostTrackingResponse struct {
	ExecutionLogId *string `json:"execution_log_id,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CostTrackingResponse CostTrackingResponse

// NewCostTrackingResponse instantiates a new CostTrackingResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCostTrackingResponse() *CostTrackingResponse {
	this := CostTrackingResponse{}
	return &this
}

// NewCostTrackingResponseWithDefaults instantiates a new CostTrackingResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCostTrackingResponseWithDefaults() *CostTrackingResponse {
	this := CostTrackingResponse{}
	return &this
}

// GetExecutionLogId returns the ExecutionLogId field value if set, zero value otherwise.
func (o *CostTrackingResponse) GetExecutionLogId() string {
	if o == nil || IsNil(o.ExecutionLogId) {
		var ret string
		return ret
	}
	return *o.ExecutionLogId
}

// GetExecutionLogIdOk returns a tuple with the ExecutionLogId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CostTrackingResponse) GetExecutionLogIdOk() (*string, bool) {
	if o == nil || IsNil(o.ExecutionLogId) {
		return nil, false
	}
	return o.ExecutionLogId, true
}

// HasExecutionLogId returns a boolean if a field has been set.
func (o *CostTrackingResponse) HasExecutionLogId() bool {
	if o != nil && !IsNil(o.ExecutionLogId) {
		return true
	}

	return false
}

// SetExecutionLogId gets a reference to the given string and assigns it to the ExecutionLogId field.
func (o *CostTrackingResponse) SetExecutionLogId(v string) {
	o.ExecutionLogId = &v
}

func (o CostTrackingResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CostTrackingResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ExecutionLogId) {
		toSerialize["execution_log_id"] = o.ExecutionLogId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CostTrackingResponse) UnmarshalJSON(data []byte) (err error) {
	varCostTrackingResponse := _CostTrackingResponse{}

	err = json.Unmarshal(data, &varCostTrackingResponse)

	if err != nil {
		return err
	}

	*o = CostTrackingResponse(varCostTrackingResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "execution_log_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCostTrackingResponse struct {
	value *CostTrackingResponse
	isSet bool
}

func (v NullableCostTrackingResponse) Get() *CostTrackingResponse {
	return v.value
}

func (v *NullableCostTrackingResponse) Set(val *CostTrackingResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCostTrackingResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCostTrackingResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCostTrackingResponse(val *CostTrackingResponse) *NullableCostTrackingResponse {
	return &NullableCostTrackingResponse{value: val, isSet: true}
}

func (v NullableCostTrackingResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCostTrackingResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


