/*
vAudience AIgentChat API

chat and api server for AIgents

API version: 0.14.1
Contact: contact@vaudience.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aigentchat

import (
	"encoding/json"
	"fmt"
)

// AdapterExecutionState the model 'AdapterExecutionState'
type AdapterExecutionState string

// List of AdapterExecutionState
const (
	AdapterExecutionState_Queued AdapterExecutionState = "Queued"
	AdapterExecutionState_Running AdapterExecutionState = "Running"
	AdapterExecutionState_Completed AdapterExecutionState = "Completed"
	AdapterExecutionState_Cancelled AdapterExecutionState = "Cancelled"
	AdapterExecutionState_Failed AdapterExecutionState = "Failed"
	AdapterExecutionState_Timeout AdapterExecutionState = "Timeout"
	AdapterExecutionState_Unknown AdapterExecutionState = "Unknown"
)

// All allowed values of AdapterExecutionState enum
var AllowedAdapterExecutionStateEnumValues = []AdapterExecutionState{
	"Queued",
	"Running",
	"Completed",
	"Cancelled",
	"Failed",
	"Timeout",
	"Unknown",
}

func (v *AdapterExecutionState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AdapterExecutionState(value)
	for _, existing := range AllowedAdapterExecutionStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AdapterExecutionState", value)
}

// NewAdapterExecutionStateFromValue returns a pointer to a valid AdapterExecutionState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAdapterExecutionStateFromValue(v string) (*AdapterExecutionState, error) {
	ev := AdapterExecutionState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AdapterExecutionState: valid values are %v", v, AllowedAdapterExecutionStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AdapterExecutionState) IsValid() bool {
	for _, existing := range AllowedAdapterExecutionStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AdapterExecutionState value
func (v AdapterExecutionState) Ptr() *AdapterExecutionState {
	return &v
}

type NullableAdapterExecutionState struct {
	value *AdapterExecutionState
	isSet bool
}

func (v NullableAdapterExecutionState) Get() *AdapterExecutionState {
	return v.value
}

func (v *NullableAdapterExecutionState) Set(val *AdapterExecutionState) {
	v.value = val
	v.isSet = true
}

func (v NullableAdapterExecutionState) IsSet() bool {
	return v.isSet
}

func (v *NullableAdapterExecutionState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdapterExecutionState(val *AdapterExecutionState) *NullableAdapterExecutionState {
	return &NullableAdapterExecutionState{value: val, isSet: true}
}

func (v NullableAdapterExecutionState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdapterExecutionState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

