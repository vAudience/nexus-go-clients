/*
vAudience AIgentChat API

chat and api server for AIgents

API version: 0.17.8
Contact: contact@vaudience.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aigentchat

import (
	"encoding/json"
)

// checks if the FileSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FileSettings{}

// FileSettings struct for FileSettings
type FileSettings struct {
	Chat *FileChatSettings `json:"chat,omitempty"`
	Upload *FileUploadSettings `json:"upload,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _FileSettings FileSettings

// NewFileSettings instantiates a new FileSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileSettings() *FileSettings {
	this := FileSettings{}
	return &this
}

// NewFileSettingsWithDefaults instantiates a new FileSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileSettingsWithDefaults() *FileSettings {
	this := FileSettings{}
	return &this
}

// GetChat returns the Chat field value if set, zero value otherwise.
func (o *FileSettings) GetChat() FileChatSettings {
	if o == nil || IsNil(o.Chat) {
		var ret FileChatSettings
		return ret
	}
	return *o.Chat
}

// GetChatOk returns a tuple with the Chat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSettings) GetChatOk() (*FileChatSettings, bool) {
	if o == nil || IsNil(o.Chat) {
		return nil, false
	}
	return o.Chat, true
}

// HasChat returns a boolean if a field has been set.
func (o *FileSettings) HasChat() bool {
	if o != nil && !IsNil(o.Chat) {
		return true
	}

	return false
}

// SetChat gets a reference to the given FileChatSettings and assigns it to the Chat field.
func (o *FileSettings) SetChat(v FileChatSettings) {
	o.Chat = &v
}

// GetUpload returns the Upload field value if set, zero value otherwise.
func (o *FileSettings) GetUpload() FileUploadSettings {
	if o == nil || IsNil(o.Upload) {
		var ret FileUploadSettings
		return ret
	}
	return *o.Upload
}

// GetUploadOk returns a tuple with the Upload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSettings) GetUploadOk() (*FileUploadSettings, bool) {
	if o == nil || IsNil(o.Upload) {
		return nil, false
	}
	return o.Upload, true
}

// HasUpload returns a boolean if a field has been set.
func (o *FileSettings) HasUpload() bool {
	if o != nil && !IsNil(o.Upload) {
		return true
	}

	return false
}

// SetUpload gets a reference to the given FileUploadSettings and assigns it to the Upload field.
func (o *FileSettings) SetUpload(v FileUploadSettings) {
	o.Upload = &v
}

func (o FileSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FileSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Chat) {
		toSerialize["chat"] = o.Chat
	}
	if !IsNil(o.Upload) {
		toSerialize["upload"] = o.Upload
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FileSettings) UnmarshalJSON(data []byte) (err error) {
	varFileSettings := _FileSettings{}

	err = json.Unmarshal(data, &varFileSettings)

	if err != nil {
		return err
	}

	*o = FileSettings(varFileSettings)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "chat")
		delete(additionalProperties, "upload")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFileSettings struct {
	value *FileSettings
	isSet bool
}

func (v NullableFileSettings) Get() *FileSettings {
	return v.value
}

func (v *NullableFileSettings) Set(val *FileSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableFileSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableFileSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileSettings(val *FileSettings) *NullableFileSettings {
	return &NullableFileSettings{value: val, isSet: true}
}

func (v NullableFileSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


