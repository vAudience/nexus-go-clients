/*
vAudience AIgentChat API

chat and api server for AIgents

API version: 0.19.1
Contact: contact@vaudience.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aigentchat

import (
	"encoding/json"
)

// checks if the FileUploadSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FileUploadSettings{}

// FileUploadSettings struct for FileUploadSettings
type FileUploadSettings struct {
	AcceptedMimeTypes []string `json:"accepted_mime_types,omitempty"`
	MaxFileSize *int64 `json:"max_file_size,omitempty"`
	MinFileSize *int64 `json:"min_file_size,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _FileUploadSettings FileUploadSettings

// NewFileUploadSettings instantiates a new FileUploadSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileUploadSettings() *FileUploadSettings {
	this := FileUploadSettings{}
	return &this
}

// NewFileUploadSettingsWithDefaults instantiates a new FileUploadSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileUploadSettingsWithDefaults() *FileUploadSettings {
	this := FileUploadSettings{}
	return &this
}

// GetAcceptedMimeTypes returns the AcceptedMimeTypes field value if set, zero value otherwise.
func (o *FileUploadSettings) GetAcceptedMimeTypes() []string {
	if o == nil || IsNil(o.AcceptedMimeTypes) {
		var ret []string
		return ret
	}
	return o.AcceptedMimeTypes
}

// GetAcceptedMimeTypesOk returns a tuple with the AcceptedMimeTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileUploadSettings) GetAcceptedMimeTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.AcceptedMimeTypes) {
		return nil, false
	}
	return o.AcceptedMimeTypes, true
}

// HasAcceptedMimeTypes returns a boolean if a field has been set.
func (o *FileUploadSettings) HasAcceptedMimeTypes() bool {
	if o != nil && !IsNil(o.AcceptedMimeTypes) {
		return true
	}

	return false
}

// SetAcceptedMimeTypes gets a reference to the given []string and assigns it to the AcceptedMimeTypes field.
func (o *FileUploadSettings) SetAcceptedMimeTypes(v []string) {
	o.AcceptedMimeTypes = v
}

// GetMaxFileSize returns the MaxFileSize field value if set, zero value otherwise.
func (o *FileUploadSettings) GetMaxFileSize() int64 {
	if o == nil || IsNil(o.MaxFileSize) {
		var ret int64
		return ret
	}
	return *o.MaxFileSize
}

// GetMaxFileSizeOk returns a tuple with the MaxFileSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileUploadSettings) GetMaxFileSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxFileSize) {
		return nil, false
	}
	return o.MaxFileSize, true
}

// HasMaxFileSize returns a boolean if a field has been set.
func (o *FileUploadSettings) HasMaxFileSize() bool {
	if o != nil && !IsNil(o.MaxFileSize) {
		return true
	}

	return false
}

// SetMaxFileSize gets a reference to the given int64 and assigns it to the MaxFileSize field.
func (o *FileUploadSettings) SetMaxFileSize(v int64) {
	o.MaxFileSize = &v
}

// GetMinFileSize returns the MinFileSize field value if set, zero value otherwise.
func (o *FileUploadSettings) GetMinFileSize() int64 {
	if o == nil || IsNil(o.MinFileSize) {
		var ret int64
		return ret
	}
	return *o.MinFileSize
}

// GetMinFileSizeOk returns a tuple with the MinFileSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileUploadSettings) GetMinFileSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.MinFileSize) {
		return nil, false
	}
	return o.MinFileSize, true
}

// HasMinFileSize returns a boolean if a field has been set.
func (o *FileUploadSettings) HasMinFileSize() bool {
	if o != nil && !IsNil(o.MinFileSize) {
		return true
	}

	return false
}

// SetMinFileSize gets a reference to the given int64 and assigns it to the MinFileSize field.
func (o *FileUploadSettings) SetMinFileSize(v int64) {
	o.MinFileSize = &v
}

func (o FileUploadSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FileUploadSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AcceptedMimeTypes) {
		toSerialize["accepted_mime_types"] = o.AcceptedMimeTypes
	}
	if !IsNil(o.MaxFileSize) {
		toSerialize["max_file_size"] = o.MaxFileSize
	}
	if !IsNil(o.MinFileSize) {
		toSerialize["min_file_size"] = o.MinFileSize
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FileUploadSettings) UnmarshalJSON(data []byte) (err error) {
	varFileUploadSettings := _FileUploadSettings{}

	err = json.Unmarshal(data, &varFileUploadSettings)

	if err != nil {
		return err
	}

	*o = FileUploadSettings(varFileUploadSettings)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "accepted_mime_types")
		delete(additionalProperties, "max_file_size")
		delete(additionalProperties, "min_file_size")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFileUploadSettings struct {
	value *FileUploadSettings
	isSet bool
}

func (v NullableFileUploadSettings) Get() *FileUploadSettings {
	return v.value
}

func (v *NullableFileUploadSettings) Set(val *FileUploadSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableFileUploadSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableFileUploadSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileUploadSettings(val *FileUploadSettings) *NullableFileUploadSettings {
	return &NullableFileUploadSettings{value: val, isSet: true}
}

func (v NullableFileUploadSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileUploadSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


