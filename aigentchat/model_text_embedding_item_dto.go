/*
vAudience AIgentChat API

chat and api server for AIgents

API version: 0.19.3
Contact: contact@vaudience.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aigentchat

import (
	"encoding/json"
	"fmt"
)

// checks if the TextEmbeddingItemDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TextEmbeddingItemDto{}

// TextEmbeddingItemDto struct for TextEmbeddingItemDto
type TextEmbeddingItemDto struct {
	MetaData map[string]interface{} `json:"meta_data,omitempty"`
	Text string `json:"text"`
	AdditionalProperties map[string]interface{}
}

type _TextEmbeddingItemDto TextEmbeddingItemDto

// NewTextEmbeddingItemDto instantiates a new TextEmbeddingItemDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTextEmbeddingItemDto(text string) *TextEmbeddingItemDto {
	this := TextEmbeddingItemDto{}
	this.Text = text
	return &this
}

// NewTextEmbeddingItemDtoWithDefaults instantiates a new TextEmbeddingItemDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTextEmbeddingItemDtoWithDefaults() *TextEmbeddingItemDto {
	this := TextEmbeddingItemDto{}
	return &this
}

// GetMetaData returns the MetaData field value if set, zero value otherwise.
func (o *TextEmbeddingItemDto) GetMetaData() map[string]interface{} {
	if o == nil || IsNil(o.MetaData) {
		var ret map[string]interface{}
		return ret
	}
	return o.MetaData
}

// GetMetaDataOk returns a tuple with the MetaData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TextEmbeddingItemDto) GetMetaDataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.MetaData) {
		return map[string]interface{}{}, false
	}
	return o.MetaData, true
}

// HasMetaData returns a boolean if a field has been set.
func (o *TextEmbeddingItemDto) HasMetaData() bool {
	if o != nil && !IsNil(o.MetaData) {
		return true
	}

	return false
}

// SetMetaData gets a reference to the given map[string]interface{} and assigns it to the MetaData field.
func (o *TextEmbeddingItemDto) SetMetaData(v map[string]interface{}) {
	o.MetaData = v
}

// GetText returns the Text field value
func (o *TextEmbeddingItemDto) GetText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Text
}

// GetTextOk returns a tuple with the Text field value
// and a boolean to check if the value has been set.
func (o *TextEmbeddingItemDto) GetTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Text, true
}

// SetText sets field value
func (o *TextEmbeddingItemDto) SetText(v string) {
	o.Text = v
}

func (o TextEmbeddingItemDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TextEmbeddingItemDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MetaData) {
		toSerialize["meta_data"] = o.MetaData
	}
	toSerialize["text"] = o.Text

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TextEmbeddingItemDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"text",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTextEmbeddingItemDto := _TextEmbeddingItemDto{}

	err = json.Unmarshal(data, &varTextEmbeddingItemDto)

	if err != nil {
		return err
	}

	*o = TextEmbeddingItemDto(varTextEmbeddingItemDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "meta_data")
		delete(additionalProperties, "text")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTextEmbeddingItemDto struct {
	value *TextEmbeddingItemDto
	isSet bool
}

func (v NullableTextEmbeddingItemDto) Get() *TextEmbeddingItemDto {
	return v.value
}

func (v *NullableTextEmbeddingItemDto) Set(val *TextEmbeddingItemDto) {
	v.value = val
	v.isSet = true
}

func (v NullableTextEmbeddingItemDto) IsSet() bool {
	return v.isSet
}

func (v *NullableTextEmbeddingItemDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTextEmbeddingItemDto(val *TextEmbeddingItemDto) *NullableTextEmbeddingItemDto {
	return &NullableTextEmbeddingItemDto{value: val, isSet: true}
}

func (v NullableTextEmbeddingItemDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTextEmbeddingItemDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


