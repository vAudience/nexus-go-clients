/*
vAudience AIgentChat API

chat and api server for AIgents

API version: 0.13.3
Contact: contact@vaudience.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aigentchat

import (
	"encoding/json"
)

// checks if the FilemanagerManagedFile type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FilemanagerManagedFile{}

// FilemanagerManagedFile struct for FilemanagerManagedFile
type FilemanagerManagedFile struct {
	FileName *string `json:"fileName,omitempty"`
	FileSize *int32 `json:"fileSize,omitempty"`
	LocalFilePath *string `json:"localFilePath,omitempty"`
	MetaData map[string]map[string]interface{} `json:"metaData,omitempty"`
	Mimetype *string `json:"mimetype,omitempty"`
	ProcessingErrors []string `json:"processingErrors,omitempty"`
	Url *string `json:"url,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _FilemanagerManagedFile FilemanagerManagedFile

// NewFilemanagerManagedFile instantiates a new FilemanagerManagedFile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilemanagerManagedFile() *FilemanagerManagedFile {
	this := FilemanagerManagedFile{}
	return &this
}

// NewFilemanagerManagedFileWithDefaults instantiates a new FilemanagerManagedFile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilemanagerManagedFileWithDefaults() *FilemanagerManagedFile {
	this := FilemanagerManagedFile{}
	return &this
}

// GetFileName returns the FileName field value if set, zero value otherwise.
func (o *FilemanagerManagedFile) GetFileName() string {
	if o == nil || IsNil(o.FileName) {
		var ret string
		return ret
	}
	return *o.FileName
}

// GetFileNameOk returns a tuple with the FileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilemanagerManagedFile) GetFileNameOk() (*string, bool) {
	if o == nil || IsNil(o.FileName) {
		return nil, false
	}
	return o.FileName, true
}

// HasFileName returns a boolean if a field has been set.
func (o *FilemanagerManagedFile) HasFileName() bool {
	if o != nil && !IsNil(o.FileName) {
		return true
	}

	return false
}

// SetFileName gets a reference to the given string and assigns it to the FileName field.
func (o *FilemanagerManagedFile) SetFileName(v string) {
	o.FileName = &v
}

// GetFileSize returns the FileSize field value if set, zero value otherwise.
func (o *FilemanagerManagedFile) GetFileSize() int32 {
	if o == nil || IsNil(o.FileSize) {
		var ret int32
		return ret
	}
	return *o.FileSize
}

// GetFileSizeOk returns a tuple with the FileSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilemanagerManagedFile) GetFileSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.FileSize) {
		return nil, false
	}
	return o.FileSize, true
}

// HasFileSize returns a boolean if a field has been set.
func (o *FilemanagerManagedFile) HasFileSize() bool {
	if o != nil && !IsNil(o.FileSize) {
		return true
	}

	return false
}

// SetFileSize gets a reference to the given int32 and assigns it to the FileSize field.
func (o *FilemanagerManagedFile) SetFileSize(v int32) {
	o.FileSize = &v
}

// GetLocalFilePath returns the LocalFilePath field value if set, zero value otherwise.
func (o *FilemanagerManagedFile) GetLocalFilePath() string {
	if o == nil || IsNil(o.LocalFilePath) {
		var ret string
		return ret
	}
	return *o.LocalFilePath
}

// GetLocalFilePathOk returns a tuple with the LocalFilePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilemanagerManagedFile) GetLocalFilePathOk() (*string, bool) {
	if o == nil || IsNil(o.LocalFilePath) {
		return nil, false
	}
	return o.LocalFilePath, true
}

// HasLocalFilePath returns a boolean if a field has been set.
func (o *FilemanagerManagedFile) HasLocalFilePath() bool {
	if o != nil && !IsNil(o.LocalFilePath) {
		return true
	}

	return false
}

// SetLocalFilePath gets a reference to the given string and assigns it to the LocalFilePath field.
func (o *FilemanagerManagedFile) SetLocalFilePath(v string) {
	o.LocalFilePath = &v
}

// GetMetaData returns the MetaData field value if set, zero value otherwise.
func (o *FilemanagerManagedFile) GetMetaData() map[string]map[string]interface{} {
	if o == nil || IsNil(o.MetaData) {
		var ret map[string]map[string]interface{}
		return ret
	}
	return o.MetaData
}

// GetMetaDataOk returns a tuple with the MetaData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilemanagerManagedFile) GetMetaDataOk() (map[string]map[string]interface{}, bool) {
	if o == nil || IsNil(o.MetaData) {
		return map[string]map[string]interface{}{}, false
	}
	return o.MetaData, true
}

// HasMetaData returns a boolean if a field has been set.
func (o *FilemanagerManagedFile) HasMetaData() bool {
	if o != nil && !IsNil(o.MetaData) {
		return true
	}

	return false
}

// SetMetaData gets a reference to the given map[string]map[string]interface{} and assigns it to the MetaData field.
func (o *FilemanagerManagedFile) SetMetaData(v map[string]map[string]interface{}) {
	o.MetaData = v
}

// GetMimetype returns the Mimetype field value if set, zero value otherwise.
func (o *FilemanagerManagedFile) GetMimetype() string {
	if o == nil || IsNil(o.Mimetype) {
		var ret string
		return ret
	}
	return *o.Mimetype
}

// GetMimetypeOk returns a tuple with the Mimetype field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilemanagerManagedFile) GetMimetypeOk() (*string, bool) {
	if o == nil || IsNil(o.Mimetype) {
		return nil, false
	}
	return o.Mimetype, true
}

// HasMimetype returns a boolean if a field has been set.
func (o *FilemanagerManagedFile) HasMimetype() bool {
	if o != nil && !IsNil(o.Mimetype) {
		return true
	}

	return false
}

// SetMimetype gets a reference to the given string and assigns it to the Mimetype field.
func (o *FilemanagerManagedFile) SetMimetype(v string) {
	o.Mimetype = &v
}

// GetProcessingErrors returns the ProcessingErrors field value if set, zero value otherwise.
func (o *FilemanagerManagedFile) GetProcessingErrors() []string {
	if o == nil || IsNil(o.ProcessingErrors) {
		var ret []string
		return ret
	}
	return o.ProcessingErrors
}

// GetProcessingErrorsOk returns a tuple with the ProcessingErrors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilemanagerManagedFile) GetProcessingErrorsOk() ([]string, bool) {
	if o == nil || IsNil(o.ProcessingErrors) {
		return nil, false
	}
	return o.ProcessingErrors, true
}

// HasProcessingErrors returns a boolean if a field has been set.
func (o *FilemanagerManagedFile) HasProcessingErrors() bool {
	if o != nil && !IsNil(o.ProcessingErrors) {
		return true
	}

	return false
}

// SetProcessingErrors gets a reference to the given []string and assigns it to the ProcessingErrors field.
func (o *FilemanagerManagedFile) SetProcessingErrors(v []string) {
	o.ProcessingErrors = v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *FilemanagerManagedFile) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilemanagerManagedFile) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *FilemanagerManagedFile) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *FilemanagerManagedFile) SetUrl(v string) {
	o.Url = &v
}

func (o FilemanagerManagedFile) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FilemanagerManagedFile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FileName) {
		toSerialize["fileName"] = o.FileName
	}
	if !IsNil(o.FileSize) {
		toSerialize["fileSize"] = o.FileSize
	}
	if !IsNil(o.LocalFilePath) {
		toSerialize["localFilePath"] = o.LocalFilePath
	}
	if !IsNil(o.MetaData) {
		toSerialize["metaData"] = o.MetaData
	}
	if !IsNil(o.Mimetype) {
		toSerialize["mimetype"] = o.Mimetype
	}
	if !IsNil(o.ProcessingErrors) {
		toSerialize["processingErrors"] = o.ProcessingErrors
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FilemanagerManagedFile) UnmarshalJSON(data []byte) (err error) {
	varFilemanagerManagedFile := _FilemanagerManagedFile{}

	err = json.Unmarshal(data, &varFilemanagerManagedFile)

	if err != nil {
		return err
	}

	*o = FilemanagerManagedFile(varFilemanagerManagedFile)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "fileName")
		delete(additionalProperties, "fileSize")
		delete(additionalProperties, "localFilePath")
		delete(additionalProperties, "metaData")
		delete(additionalProperties, "mimetype")
		delete(additionalProperties, "processingErrors")
		delete(additionalProperties, "url")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFilemanagerManagedFile struct {
	value *FilemanagerManagedFile
	isSet bool
}

func (v NullableFilemanagerManagedFile) Get() *FilemanagerManagedFile {
	return v.value
}

func (v *NullableFilemanagerManagedFile) Set(val *FilemanagerManagedFile) {
	v.value = val
	v.isSet = true
}

func (v NullableFilemanagerManagedFile) IsSet() bool {
	return v.isSet
}

func (v *NullableFilemanagerManagedFile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilemanagerManagedFile(val *FilemanagerManagedFile) *NullableFilemanagerManagedFile {
	return &NullableFilemanagerManagedFile{value: val, isSet: true}
}

func (v NullableFilemanagerManagedFile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilemanagerManagedFile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


