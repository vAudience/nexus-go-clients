/*
vAudience AIgentChat API

chat and api server for AIgents

API version: 0.20.0
Contact: contact@vaudience.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aigentchat

import (
	"encoding/json"
)

// checks if the AbilityV2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AbilityV2{}

// AbilityV2 struct for AbilityV2
type AbilityV2 struct {
	Constraints []AIModelConstraint `json:"constraints,omitempty"`
	Type *string `json:"type,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AbilityV2 AbilityV2

// NewAbilityV2 instantiates a new AbilityV2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAbilityV2() *AbilityV2 {
	this := AbilityV2{}
	return &this
}

// NewAbilityV2WithDefaults instantiates a new AbilityV2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAbilityV2WithDefaults() *AbilityV2 {
	this := AbilityV2{}
	return &this
}

// GetConstraints returns the Constraints field value if set, zero value otherwise.
func (o *AbilityV2) GetConstraints() []AIModelConstraint {
	if o == nil || IsNil(o.Constraints) {
		var ret []AIModelConstraint
		return ret
	}
	return o.Constraints
}

// GetConstraintsOk returns a tuple with the Constraints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AbilityV2) GetConstraintsOk() ([]AIModelConstraint, bool) {
	if o == nil || IsNil(o.Constraints) {
		return nil, false
	}
	return o.Constraints, true
}

// HasConstraints returns a boolean if a field has been set.
func (o *AbilityV2) HasConstraints() bool {
	if o != nil && !IsNil(o.Constraints) {
		return true
	}

	return false
}

// SetConstraints gets a reference to the given []AIModelConstraint and assigns it to the Constraints field.
func (o *AbilityV2) SetConstraints(v []AIModelConstraint) {
	o.Constraints = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *AbilityV2) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AbilityV2) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *AbilityV2) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *AbilityV2) SetType(v string) {
	o.Type = &v
}

func (o AbilityV2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AbilityV2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Constraints) {
		toSerialize["constraints"] = o.Constraints
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AbilityV2) UnmarshalJSON(data []byte) (err error) {
	varAbilityV2 := _AbilityV2{}

	err = json.Unmarshal(data, &varAbilityV2)

	if err != nil {
		return err
	}

	*o = AbilityV2(varAbilityV2)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "constraints")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAbilityV2 struct {
	value *AbilityV2
	isSet bool
}

func (v NullableAbilityV2) Get() *AbilityV2 {
	return v.value
}

func (v *NullableAbilityV2) Set(val *AbilityV2) {
	v.value = val
	v.isSet = true
}

func (v NullableAbilityV2) IsSet() bool {
	return v.isSet
}

func (v *NullableAbilityV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAbilityV2(val *AbilityV2) *NullableAbilityV2 {
	return &NullableAbilityV2{value: val, isSet: true}
}

func (v NullableAbilityV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAbilityV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


