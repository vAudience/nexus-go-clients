/*
vAudience AI File Manager API

API for the vAudience AI File Manager

API version: 0.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package filemanager

import (
	"encoding/json"
	"fmt"
)

// checks if the FileMetadataBatchResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FileMetadataBatchResponse{}

// FileMetadataBatchResponse struct for FileMetadataBatchResponse
type FileMetadataBatchResponse struct {
	Files []FileMetadataResponse `json:"files"`
	AdditionalProperties map[string]interface{}
}

type _FileMetadataBatchResponse FileMetadataBatchResponse

// NewFileMetadataBatchResponse instantiates a new FileMetadataBatchResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileMetadataBatchResponse(files []FileMetadataResponse) *FileMetadataBatchResponse {
	this := FileMetadataBatchResponse{}
	this.Files = files
	return &this
}

// NewFileMetadataBatchResponseWithDefaults instantiates a new FileMetadataBatchResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileMetadataBatchResponseWithDefaults() *FileMetadataBatchResponse {
	this := FileMetadataBatchResponse{}
	return &this
}

// GetFiles returns the Files field value
func (o *FileMetadataBatchResponse) GetFiles() []FileMetadataResponse {
	if o == nil {
		var ret []FileMetadataResponse
		return ret
	}

	return o.Files
}

// GetFilesOk returns a tuple with the Files field value
// and a boolean to check if the value has been set.
func (o *FileMetadataBatchResponse) GetFilesOk() ([]FileMetadataResponse, bool) {
	if o == nil {
		return nil, false
	}
	return o.Files, true
}

// SetFiles sets field value
func (o *FileMetadataBatchResponse) SetFiles(v []FileMetadataResponse) {
	o.Files = v
}

func (o FileMetadataBatchResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FileMetadataBatchResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["files"] = o.Files

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FileMetadataBatchResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"files",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFileMetadataBatchResponse := _FileMetadataBatchResponse{}

	err = json.Unmarshal(data, &varFileMetadataBatchResponse)

	if err != nil {
		return err
	}

	*o = FileMetadataBatchResponse(varFileMetadataBatchResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "files")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFileMetadataBatchResponse struct {
	value *FileMetadataBatchResponse
	isSet bool
}

func (v NullableFileMetadataBatchResponse) Get() *FileMetadataBatchResponse {
	return v.value
}

func (v *NullableFileMetadataBatchResponse) Set(val *FileMetadataBatchResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableFileMetadataBatchResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableFileMetadataBatchResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileMetadataBatchResponse(val *FileMetadataBatchResponse) *NullableFileMetadataBatchResponse {
	return &NullableFileMetadataBatchResponse{value: val, isSet: true}
}

func (v NullableFileMetadataBatchResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileMetadataBatchResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


