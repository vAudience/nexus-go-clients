/*
vAudience AI File Manager API

API for the vAudience AI File Manager

API version: 0.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package filemanager

import (
	"encoding/json"
	"fmt"
)

// checks if the FileMetadataResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FileMetadataResponse{}

// FileMetadataResponse struct for FileMetadataResponse
type FileMetadataResponse struct {
	CreatedAt string `json:"created_at"`
	ExpiresAt *string `json:"expires_at,omitempty"`
	FileName string `json:"file_name"`
	FileSize int64 `json:"file_size"`
	Id string `json:"id"`
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	MimeType string `json:"mime_type"`
	OrganizationId *string `json:"organization_id,omitempty"`
	OriginalFileName string `json:"original_file_name"`
	OriginalFileSize int64 `json:"original_file_size"`
	OriginalMimeType string `json:"original_mime_type"`
	OriginalUrl *string `json:"original_url,omitempty"`
	// temp, public, privateOrg, privateUser, privateTeam
	StorageCategory string `json:"storage_category"`
	StoragePath string `json:"storage_path"`
	TeamId *string `json:"team_id,omitempty"`
	UpdatedAt string `json:"updated_at"`
	// temp, image
	UploadCategory string `json:"upload_category"`
	UploadParams map[string]interface{} `json:"upload_params,omitempty"`
	Url string `json:"url"`
	UserId *string `json:"user_id,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _FileMetadataResponse FileMetadataResponse

// NewFileMetadataResponse instantiates a new FileMetadataResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileMetadataResponse(createdAt string, fileName string, fileSize int64, id string, mimeType string, originalFileName string, originalFileSize int64, originalMimeType string, storageCategory string, storagePath string, updatedAt string, uploadCategory string, url string) *FileMetadataResponse {
	this := FileMetadataResponse{}
	this.CreatedAt = createdAt
	this.FileName = fileName
	this.FileSize = fileSize
	this.Id = id
	this.MimeType = mimeType
	this.OriginalFileName = originalFileName
	this.OriginalFileSize = originalFileSize
	this.OriginalMimeType = originalMimeType
	this.StorageCategory = storageCategory
	this.StoragePath = storagePath
	this.UpdatedAt = updatedAt
	this.UploadCategory = uploadCategory
	this.Url = url
	return &this
}

// NewFileMetadataResponseWithDefaults instantiates a new FileMetadataResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileMetadataResponseWithDefaults() *FileMetadataResponse {
	this := FileMetadataResponse{}
	return &this
}

// GetCreatedAt returns the CreatedAt field value
func (o *FileMetadataResponse) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *FileMetadataResponse) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *FileMetadataResponse) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetExpiresAt returns the ExpiresAt field value if set, zero value otherwise.
func (o *FileMetadataResponse) GetExpiresAt() string {
	if o == nil || IsNil(o.ExpiresAt) {
		var ret string
		return ret
	}
	return *o.ExpiresAt
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileMetadataResponse) GetExpiresAtOk() (*string, bool) {
	if o == nil || IsNil(o.ExpiresAt) {
		return nil, false
	}
	return o.ExpiresAt, true
}

// HasExpiresAt returns a boolean if a field has been set.
func (o *FileMetadataResponse) HasExpiresAt() bool {
	if o != nil && !IsNil(o.ExpiresAt) {
		return true
	}

	return false
}

// SetExpiresAt gets a reference to the given string and assigns it to the ExpiresAt field.
func (o *FileMetadataResponse) SetExpiresAt(v string) {
	o.ExpiresAt = &v
}

// GetFileName returns the FileName field value
func (o *FileMetadataResponse) GetFileName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FileName
}

// GetFileNameOk returns a tuple with the FileName field value
// and a boolean to check if the value has been set.
func (o *FileMetadataResponse) GetFileNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FileName, true
}

// SetFileName sets field value
func (o *FileMetadataResponse) SetFileName(v string) {
	o.FileName = v
}

// GetFileSize returns the FileSize field value
func (o *FileMetadataResponse) GetFileSize() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.FileSize
}

// GetFileSizeOk returns a tuple with the FileSize field value
// and a boolean to check if the value has been set.
func (o *FileMetadataResponse) GetFileSizeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FileSize, true
}

// SetFileSize sets field value
func (o *FileMetadataResponse) SetFileSize(v int64) {
	o.FileSize = v
}

// GetId returns the Id field value
func (o *FileMetadataResponse) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *FileMetadataResponse) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *FileMetadataResponse) SetId(v string) {
	o.Id = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *FileMetadataResponse) GetMetadata() map[string]interface{} {
	if o == nil || IsNil(o.Metadata) {
		var ret map[string]interface{}
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileMetadataResponse) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Metadata) {
		return map[string]interface{}{}, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *FileMetadataResponse) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]interface{} and assigns it to the Metadata field.
func (o *FileMetadataResponse) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

// GetMimeType returns the MimeType field value
func (o *FileMetadataResponse) GetMimeType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MimeType
}

// GetMimeTypeOk returns a tuple with the MimeType field value
// and a boolean to check if the value has been set.
func (o *FileMetadataResponse) GetMimeTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MimeType, true
}

// SetMimeType sets field value
func (o *FileMetadataResponse) SetMimeType(v string) {
	o.MimeType = v
}

// GetOrganizationId returns the OrganizationId field value if set, zero value otherwise.
func (o *FileMetadataResponse) GetOrganizationId() string {
	if o == nil || IsNil(o.OrganizationId) {
		var ret string
		return ret
	}
	return *o.OrganizationId
}

// GetOrganizationIdOk returns a tuple with the OrganizationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileMetadataResponse) GetOrganizationIdOk() (*string, bool) {
	if o == nil || IsNil(o.OrganizationId) {
		return nil, false
	}
	return o.OrganizationId, true
}

// HasOrganizationId returns a boolean if a field has been set.
func (o *FileMetadataResponse) HasOrganizationId() bool {
	if o != nil && !IsNil(o.OrganizationId) {
		return true
	}

	return false
}

// SetOrganizationId gets a reference to the given string and assigns it to the OrganizationId field.
func (o *FileMetadataResponse) SetOrganizationId(v string) {
	o.OrganizationId = &v
}

// GetOriginalFileName returns the OriginalFileName field value
func (o *FileMetadataResponse) GetOriginalFileName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OriginalFileName
}

// GetOriginalFileNameOk returns a tuple with the OriginalFileName field value
// and a boolean to check if the value has been set.
func (o *FileMetadataResponse) GetOriginalFileNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OriginalFileName, true
}

// SetOriginalFileName sets field value
func (o *FileMetadataResponse) SetOriginalFileName(v string) {
	o.OriginalFileName = v
}

// GetOriginalFileSize returns the OriginalFileSize field value
func (o *FileMetadataResponse) GetOriginalFileSize() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.OriginalFileSize
}

// GetOriginalFileSizeOk returns a tuple with the OriginalFileSize field value
// and a boolean to check if the value has been set.
func (o *FileMetadataResponse) GetOriginalFileSizeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OriginalFileSize, true
}

// SetOriginalFileSize sets field value
func (o *FileMetadataResponse) SetOriginalFileSize(v int64) {
	o.OriginalFileSize = v
}

// GetOriginalMimeType returns the OriginalMimeType field value
func (o *FileMetadataResponse) GetOriginalMimeType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OriginalMimeType
}

// GetOriginalMimeTypeOk returns a tuple with the OriginalMimeType field value
// and a boolean to check if the value has been set.
func (o *FileMetadataResponse) GetOriginalMimeTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OriginalMimeType, true
}

// SetOriginalMimeType sets field value
func (o *FileMetadataResponse) SetOriginalMimeType(v string) {
	o.OriginalMimeType = v
}

// GetOriginalUrl returns the OriginalUrl field value if set, zero value otherwise.
func (o *FileMetadataResponse) GetOriginalUrl() string {
	if o == nil || IsNil(o.OriginalUrl) {
		var ret string
		return ret
	}
	return *o.OriginalUrl
}

// GetOriginalUrlOk returns a tuple with the OriginalUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileMetadataResponse) GetOriginalUrlOk() (*string, bool) {
	if o == nil || IsNil(o.OriginalUrl) {
		return nil, false
	}
	return o.OriginalUrl, true
}

// HasOriginalUrl returns a boolean if a field has been set.
func (o *FileMetadataResponse) HasOriginalUrl() bool {
	if o != nil && !IsNil(o.OriginalUrl) {
		return true
	}

	return false
}

// SetOriginalUrl gets a reference to the given string and assigns it to the OriginalUrl field.
func (o *FileMetadataResponse) SetOriginalUrl(v string) {
	o.OriginalUrl = &v
}

// GetStorageCategory returns the StorageCategory field value
func (o *FileMetadataResponse) GetStorageCategory() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StorageCategory
}

// GetStorageCategoryOk returns a tuple with the StorageCategory field value
// and a boolean to check if the value has been set.
func (o *FileMetadataResponse) GetStorageCategoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StorageCategory, true
}

// SetStorageCategory sets field value
func (o *FileMetadataResponse) SetStorageCategory(v string) {
	o.StorageCategory = v
}

// GetStoragePath returns the StoragePath field value
func (o *FileMetadataResponse) GetStoragePath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StoragePath
}

// GetStoragePathOk returns a tuple with the StoragePath field value
// and a boolean to check if the value has been set.
func (o *FileMetadataResponse) GetStoragePathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StoragePath, true
}

// SetStoragePath sets field value
func (o *FileMetadataResponse) SetStoragePath(v string) {
	o.StoragePath = v
}

// GetTeamId returns the TeamId field value if set, zero value otherwise.
func (o *FileMetadataResponse) GetTeamId() string {
	if o == nil || IsNil(o.TeamId) {
		var ret string
		return ret
	}
	return *o.TeamId
}

// GetTeamIdOk returns a tuple with the TeamId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileMetadataResponse) GetTeamIdOk() (*string, bool) {
	if o == nil || IsNil(o.TeamId) {
		return nil, false
	}
	return o.TeamId, true
}

// HasTeamId returns a boolean if a field has been set.
func (o *FileMetadataResponse) HasTeamId() bool {
	if o != nil && !IsNil(o.TeamId) {
		return true
	}

	return false
}

// SetTeamId gets a reference to the given string and assigns it to the TeamId field.
func (o *FileMetadataResponse) SetTeamId(v string) {
	o.TeamId = &v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *FileMetadataResponse) GetUpdatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *FileMetadataResponse) GetUpdatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *FileMetadataResponse) SetUpdatedAt(v string) {
	o.UpdatedAt = v
}

// GetUploadCategory returns the UploadCategory field value
func (o *FileMetadataResponse) GetUploadCategory() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UploadCategory
}

// GetUploadCategoryOk returns a tuple with the UploadCategory field value
// and a boolean to check if the value has been set.
func (o *FileMetadataResponse) GetUploadCategoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UploadCategory, true
}

// SetUploadCategory sets field value
func (o *FileMetadataResponse) SetUploadCategory(v string) {
	o.UploadCategory = v
}

// GetUploadParams returns the UploadParams field value if set, zero value otherwise.
func (o *FileMetadataResponse) GetUploadParams() map[string]interface{} {
	if o == nil || IsNil(o.UploadParams) {
		var ret map[string]interface{}
		return ret
	}
	return o.UploadParams
}

// GetUploadParamsOk returns a tuple with the UploadParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileMetadataResponse) GetUploadParamsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.UploadParams) {
		return map[string]interface{}{}, false
	}
	return o.UploadParams, true
}

// HasUploadParams returns a boolean if a field has been set.
func (o *FileMetadataResponse) HasUploadParams() bool {
	if o != nil && !IsNil(o.UploadParams) {
		return true
	}

	return false
}

// SetUploadParams gets a reference to the given map[string]interface{} and assigns it to the UploadParams field.
func (o *FileMetadataResponse) SetUploadParams(v map[string]interface{}) {
	o.UploadParams = v
}

// GetUrl returns the Url field value
func (o *FileMetadataResponse) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *FileMetadataResponse) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *FileMetadataResponse) SetUrl(v string) {
	o.Url = v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *FileMetadataResponse) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileMetadataResponse) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *FileMetadataResponse) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *FileMetadataResponse) SetUserId(v string) {
	o.UserId = &v
}

func (o FileMetadataResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FileMetadataResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["created_at"] = o.CreatedAt
	if !IsNil(o.ExpiresAt) {
		toSerialize["expires_at"] = o.ExpiresAt
	}
	toSerialize["file_name"] = o.FileName
	toSerialize["file_size"] = o.FileSize
	toSerialize["id"] = o.Id
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	toSerialize["mime_type"] = o.MimeType
	if !IsNil(o.OrganizationId) {
		toSerialize["organization_id"] = o.OrganizationId
	}
	toSerialize["original_file_name"] = o.OriginalFileName
	toSerialize["original_file_size"] = o.OriginalFileSize
	toSerialize["original_mime_type"] = o.OriginalMimeType
	if !IsNil(o.OriginalUrl) {
		toSerialize["original_url"] = o.OriginalUrl
	}
	toSerialize["storage_category"] = o.StorageCategory
	toSerialize["storage_path"] = o.StoragePath
	if !IsNil(o.TeamId) {
		toSerialize["team_id"] = o.TeamId
	}
	toSerialize["updated_at"] = o.UpdatedAt
	toSerialize["upload_category"] = o.UploadCategory
	if !IsNil(o.UploadParams) {
		toSerialize["upload_params"] = o.UploadParams
	}
	toSerialize["url"] = o.Url
	if !IsNil(o.UserId) {
		toSerialize["user_id"] = o.UserId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FileMetadataResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"created_at",
		"file_name",
		"file_size",
		"id",
		"mime_type",
		"original_file_name",
		"original_file_size",
		"original_mime_type",
		"storage_category",
		"storage_path",
		"updated_at",
		"upload_category",
		"url",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFileMetadataResponse := _FileMetadataResponse{}

	err = json.Unmarshal(data, &varFileMetadataResponse)

	if err != nil {
		return err
	}

	*o = FileMetadataResponse(varFileMetadataResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "expires_at")
		delete(additionalProperties, "file_name")
		delete(additionalProperties, "file_size")
		delete(additionalProperties, "id")
		delete(additionalProperties, "metadata")
		delete(additionalProperties, "mime_type")
		delete(additionalProperties, "organization_id")
		delete(additionalProperties, "original_file_name")
		delete(additionalProperties, "original_file_size")
		delete(additionalProperties, "original_mime_type")
		delete(additionalProperties, "original_url")
		delete(additionalProperties, "storage_category")
		delete(additionalProperties, "storage_path")
		delete(additionalProperties, "team_id")
		delete(additionalProperties, "updated_at")
		delete(additionalProperties, "upload_category")
		delete(additionalProperties, "upload_params")
		delete(additionalProperties, "url")
		delete(additionalProperties, "user_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFileMetadataResponse struct {
	value *FileMetadataResponse
	isSet bool
}

func (v NullableFileMetadataResponse) Get() *FileMetadataResponse {
	return v.value
}

func (v *NullableFileMetadataResponse) Set(val *FileMetadataResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableFileMetadataResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableFileMetadataResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileMetadataResponse(val *FileMetadataResponse) *NullableFileMetadataResponse {
	return &NullableFileMetadataResponse{value: val, isSet: true}
}

func (v NullableFileMetadataResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileMetadataResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


