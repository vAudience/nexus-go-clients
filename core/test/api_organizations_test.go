/*
Vaudience AI Core API

Testing OrganizationsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package core

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/vaudience/nexus-go-clients/core"
)

func Test_core_OrganizationsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test OrganizationsAPIService AcceptInvite", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var inviteId string

		resp, httpRes, err := apiClient.OrganizationsAPI.AcceptInvite(context.Background(), id, inviteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService CreateMember", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.OrganizationsAPI.CreateMember(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService CreateOrganization", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.OrganizationsAPI.CreateOrganization(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService CreateOrganizationApiKey", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.OrganizationsAPI.CreateOrganizationApiKey(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService CreateOrganizationRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.OrganizationsAPI.CreateOrganizationRole(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService CreateOrganizationSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.OrganizationsAPI.CreateOrganizationSettings(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService CreateSubscription", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.OrganizationsAPI.CreateSubscription(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService CreateTeam", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.OrganizationsAPI.CreateTeam(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService CreateTeamMember", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var teamId string

		resp, httpRes, err := apiClient.OrganizationsAPI.CreateTeamMember(context.Background(), id, teamId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService DeleteInvite", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var inviteId string

		httpRes, err := apiClient.OrganizationsAPI.DeleteInvite(context.Background(), id, inviteId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService DeleteMember", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var memberId string

		resp, httpRes, err := apiClient.OrganizationsAPI.DeleteMember(context.Background(), id, memberId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService DeleteOrganization", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.OrganizationsAPI.DeleteOrganization(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService DeleteOrganizationApiKey", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var keyId string

		httpRes, err := apiClient.OrganizationsAPI.DeleteOrganizationApiKey(context.Background(), id, keyId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService DeleteOrganizationRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var roleId string

		httpRes, err := apiClient.OrganizationsAPI.DeleteOrganizationRole(context.Background(), id, roleId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService DeleteOrganizationSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.OrganizationsAPI.DeleteOrganizationSettings(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService DeleteSubscription", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.OrganizationsAPI.DeleteSubscription(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService DeleteTeam", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var teamId string

		httpRes, err := apiClient.OrganizationsAPI.DeleteTeam(context.Background(), id, teamId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService DeleteTeamMember", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var teamId string
		var memberId string

		httpRes, err := apiClient.OrganizationsAPI.DeleteTeamMember(context.Background(), id, teamId, memberId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService GetAllMyOrganizations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.OrganizationsAPI.GetAllMyOrganizations(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService GetCheckoutSession", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var productId string

		resp, httpRes, err := apiClient.OrganizationsAPI.GetCheckoutSession(context.Background(), id, productId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService GetCreditsPayments", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.OrganizationsAPI.GetCreditsPayments(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService GetCustomerPortalSession", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var typeId string

		resp, httpRes, err := apiClient.OrganizationsAPI.GetCustomerPortalSession(context.Background(), id, typeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService GetInvite", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var inviteId string

		resp, httpRes, err := apiClient.OrganizationsAPI.GetInvite(context.Background(), id, inviteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService GetInvites", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.OrganizationsAPI.GetInvites(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService GetMember", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var memberId string

		resp, httpRes, err := apiClient.OrganizationsAPI.GetMember(context.Background(), id, memberId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService GetMembers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.OrganizationsAPI.GetMembers(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService GetOrganization", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.OrganizationsAPI.GetOrganization(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService GetOrganizationApiKeys", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.OrganizationsAPI.GetOrganizationApiKeys(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService GetOrganizationRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var roleId string

		resp, httpRes, err := apiClient.OrganizationsAPI.GetOrganizationRole(context.Background(), id, roleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService GetOrganizationRoles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.OrganizationsAPI.GetOrganizationRoles(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService GetOrganizationSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.OrganizationsAPI.GetOrganizationSettings(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService GetSubscription", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.OrganizationsAPI.GetSubscription(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService GetTeam", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var teamId string

		resp, httpRes, err := apiClient.OrganizationsAPI.GetTeam(context.Background(), id, teamId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService GetTeamMember", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var teamId string
		var memberId string

		resp, httpRes, err := apiClient.OrganizationsAPI.GetTeamMember(context.Background(), id, teamId, memberId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService GetTeamMembers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var teamId string

		resp, httpRes, err := apiClient.OrganizationsAPI.GetTeamMembers(context.Background(), id, teamId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService GetTeams", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.OrganizationsAPI.GetTeams(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService Invite", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.OrganizationsAPI.Invite(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService PatchMember", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var memberId string

		resp, httpRes, err := apiClient.OrganizationsAPI.PatchMember(context.Background(), id, memberId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService PatchOrganization", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.OrganizationsAPI.PatchOrganization(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService PatchOrganizationApiKey", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var keyId string

		resp, httpRes, err := apiClient.OrganizationsAPI.PatchOrganizationApiKey(context.Background(), id, keyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService PatchOrganizationRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var roleId string

		resp, httpRes, err := apiClient.OrganizationsAPI.PatchOrganizationRole(context.Background(), id, roleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService PatchOrganizationSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.OrganizationsAPI.PatchOrganizationSettings(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService PatchTeam", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var teamId string

		resp, httpRes, err := apiClient.OrganizationsAPI.PatchTeam(context.Background(), id, teamId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService ReactivateSubscription", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.OrganizationsAPI.ReactivateSubscription(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService ResendInvite", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var inviteId string

		resp, httpRes, err := apiClient.OrganizationsAPI.ResendInvite(context.Background(), id, inviteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService UpdateSubscription", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.OrganizationsAPI.UpdateSubscription(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
