/*
Vaudience AI Core API

API for the Vaudience AI Core

API version: 0.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package core

import (
	"encoding/json"
)

// checks if the RolePatchRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RolePatchRequest{}

// RolePatchRequest struct for RolePatchRequest
type RolePatchRequest struct {
	DefaultMemberRole *bool `json:"defaultMemberRole,omitempty"`
	Name *string `json:"name,omitempty"`
	Permissions []string `json:"permissions,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RolePatchRequest RolePatchRequest

// NewRolePatchRequest instantiates a new RolePatchRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRolePatchRequest() *RolePatchRequest {
	this := RolePatchRequest{}
	return &this
}

// NewRolePatchRequestWithDefaults instantiates a new RolePatchRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRolePatchRequestWithDefaults() *RolePatchRequest {
	this := RolePatchRequest{}
	return &this
}

// GetDefaultMemberRole returns the DefaultMemberRole field value if set, zero value otherwise.
func (o *RolePatchRequest) GetDefaultMemberRole() bool {
	if o == nil || IsNil(o.DefaultMemberRole) {
		var ret bool
		return ret
	}
	return *o.DefaultMemberRole
}

// GetDefaultMemberRoleOk returns a tuple with the DefaultMemberRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolePatchRequest) GetDefaultMemberRoleOk() (*bool, bool) {
	if o == nil || IsNil(o.DefaultMemberRole) {
		return nil, false
	}
	return o.DefaultMemberRole, true
}

// HasDefaultMemberRole returns a boolean if a field has been set.
func (o *RolePatchRequest) HasDefaultMemberRole() bool {
	if o != nil && !IsNil(o.DefaultMemberRole) {
		return true
	}

	return false
}

// SetDefaultMemberRole gets a reference to the given bool and assigns it to the DefaultMemberRole field.
func (o *RolePatchRequest) SetDefaultMemberRole(v bool) {
	o.DefaultMemberRole = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RolePatchRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolePatchRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RolePatchRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RolePatchRequest) SetName(v string) {
	o.Name = &v
}

// GetPermissions returns the Permissions field value if set, zero value otherwise.
func (o *RolePatchRequest) GetPermissions() []string {
	if o == nil || IsNil(o.Permissions) {
		var ret []string
		return ret
	}
	return o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolePatchRequest) GetPermissionsOk() ([]string, bool) {
	if o == nil || IsNil(o.Permissions) {
		return nil, false
	}
	return o.Permissions, true
}

// HasPermissions returns a boolean if a field has been set.
func (o *RolePatchRequest) HasPermissions() bool {
	if o != nil && !IsNil(o.Permissions) {
		return true
	}

	return false
}

// SetPermissions gets a reference to the given []string and assigns it to the Permissions field.
func (o *RolePatchRequest) SetPermissions(v []string) {
	o.Permissions = v
}

func (o RolePatchRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RolePatchRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DefaultMemberRole) {
		toSerialize["defaultMemberRole"] = o.DefaultMemberRole
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Permissions) {
		toSerialize["permissions"] = o.Permissions
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RolePatchRequest) UnmarshalJSON(data []byte) (err error) {
	varRolePatchRequest := _RolePatchRequest{}

	err = json.Unmarshal(data, &varRolePatchRequest)

	if err != nil {
		return err
	}

	*o = RolePatchRequest(varRolePatchRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "defaultMemberRole")
		delete(additionalProperties, "name")
		delete(additionalProperties, "permissions")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRolePatchRequest struct {
	value *RolePatchRequest
	isSet bool
}

func (v NullableRolePatchRequest) Get() *RolePatchRequest {
	return v.value
}

func (v *NullableRolePatchRequest) Set(val *RolePatchRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRolePatchRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRolePatchRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRolePatchRequest(val *RolePatchRequest) *NullableRolePatchRequest {
	return &NullableRolePatchRequest{value: val, isSet: true}
}

func (v NullableRolePatchRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRolePatchRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


