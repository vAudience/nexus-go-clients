/*
Vaudience AI Core API

API for the Vaudience AI Core

API version: 0.2.8
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package core

import (
	"encoding/json"
	"fmt"
)

// checks if the TeamPostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TeamPostRequest{}

// TeamPostRequest struct for TeamPostRequest
type TeamPostRequest struct {
	MetaId *string `json:"metaId,omitempty"`
	Name string `json:"name"`
	AdditionalProperties map[string]interface{}
}

type _TeamPostRequest TeamPostRequest

// NewTeamPostRequest instantiates a new TeamPostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTeamPostRequest(name string) *TeamPostRequest {
	this := TeamPostRequest{}
	this.Name = name
	return &this
}

// NewTeamPostRequestWithDefaults instantiates a new TeamPostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTeamPostRequestWithDefaults() *TeamPostRequest {
	this := TeamPostRequest{}
	return &this
}

// GetMetaId returns the MetaId field value if set, zero value otherwise.
func (o *TeamPostRequest) GetMetaId() string {
	if o == nil || IsNil(o.MetaId) {
		var ret string
		return ret
	}
	return *o.MetaId
}

// GetMetaIdOk returns a tuple with the MetaId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamPostRequest) GetMetaIdOk() (*string, bool) {
	if o == nil || IsNil(o.MetaId) {
		return nil, false
	}
	return o.MetaId, true
}

// HasMetaId returns a boolean if a field has been set.
func (o *TeamPostRequest) HasMetaId() bool {
	if o != nil && !IsNil(o.MetaId) {
		return true
	}

	return false
}

// SetMetaId gets a reference to the given string and assigns it to the MetaId field.
func (o *TeamPostRequest) SetMetaId(v string) {
	o.MetaId = &v
}

// GetName returns the Name field value
func (o *TeamPostRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *TeamPostRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *TeamPostRequest) SetName(v string) {
	o.Name = v
}

func (o TeamPostRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TeamPostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MetaId) {
		toSerialize["metaId"] = o.MetaId
	}
	toSerialize["name"] = o.Name

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TeamPostRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTeamPostRequest := _TeamPostRequest{}

	err = json.Unmarshal(data, &varTeamPostRequest)

	if err != nil {
		return err
	}

	*o = TeamPostRequest(varTeamPostRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "metaId")
		delete(additionalProperties, "name")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTeamPostRequest struct {
	value *TeamPostRequest
	isSet bool
}

func (v NullableTeamPostRequest) Get() *TeamPostRequest {
	return v.value
}

func (v *NullableTeamPostRequest) Set(val *TeamPostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableTeamPostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableTeamPostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTeamPostRequest(val *TeamPostRequest) *NullableTeamPostRequest {
	return &NullableTeamPostRequest{value: val, isSet: true}
}

func (v NullableTeamPostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTeamPostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


