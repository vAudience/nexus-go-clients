/*
Vaudience AI Core API

API for the Vaudience AI Core

API version: 0.3.5
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package core

import (
	"encoding/json"
	"fmt"
)

// checks if the MemberDeleteResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MemberDeleteResponse{}

// MemberDeleteResponse struct for MemberDeleteResponse
type MemberDeleteResponse struct {
	Id string `json:"id"`
	ResourceIds []string `json:"resourceIds"`
	ResourcesAction string `json:"resourcesAction"`
	AdditionalProperties map[string]interface{}
}

type _MemberDeleteResponse MemberDeleteResponse

// NewMemberDeleteResponse instantiates a new MemberDeleteResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMemberDeleteResponse(id string, resourceIds []string, resourcesAction string) *MemberDeleteResponse {
	this := MemberDeleteResponse{}
	this.Id = id
	this.ResourceIds = resourceIds
	this.ResourcesAction = resourcesAction
	return &this
}

// NewMemberDeleteResponseWithDefaults instantiates a new MemberDeleteResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMemberDeleteResponseWithDefaults() *MemberDeleteResponse {
	this := MemberDeleteResponse{}
	return &this
}

// GetId returns the Id field value
func (o *MemberDeleteResponse) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *MemberDeleteResponse) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *MemberDeleteResponse) SetId(v string) {
	o.Id = v
}

// GetResourceIds returns the ResourceIds field value
func (o *MemberDeleteResponse) GetResourceIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ResourceIds
}

// GetResourceIdsOk returns a tuple with the ResourceIds field value
// and a boolean to check if the value has been set.
func (o *MemberDeleteResponse) GetResourceIdsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ResourceIds, true
}

// SetResourceIds sets field value
func (o *MemberDeleteResponse) SetResourceIds(v []string) {
	o.ResourceIds = v
}

// GetResourcesAction returns the ResourcesAction field value
func (o *MemberDeleteResponse) GetResourcesAction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourcesAction
}

// GetResourcesActionOk returns a tuple with the ResourcesAction field value
// and a boolean to check if the value has been set.
func (o *MemberDeleteResponse) GetResourcesActionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourcesAction, true
}

// SetResourcesAction sets field value
func (o *MemberDeleteResponse) SetResourcesAction(v string) {
	o.ResourcesAction = v
}

func (o MemberDeleteResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MemberDeleteResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["resourceIds"] = o.ResourceIds
	toSerialize["resourcesAction"] = o.ResourcesAction

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MemberDeleteResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"resourceIds",
		"resourcesAction",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMemberDeleteResponse := _MemberDeleteResponse{}

	err = json.Unmarshal(data, &varMemberDeleteResponse)

	if err != nil {
		return err
	}

	*o = MemberDeleteResponse(varMemberDeleteResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "resourceIds")
		delete(additionalProperties, "resourcesAction")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMemberDeleteResponse struct {
	value *MemberDeleteResponse
	isSet bool
}

func (v NullableMemberDeleteResponse) Get() *MemberDeleteResponse {
	return v.value
}

func (v *NullableMemberDeleteResponse) Set(val *MemberDeleteResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableMemberDeleteResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableMemberDeleteResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMemberDeleteResponse(val *MemberDeleteResponse) *NullableMemberDeleteResponse {
	return &NullableMemberDeleteResponse{value: val, isSet: true}
}

func (v NullableMemberDeleteResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMemberDeleteResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


