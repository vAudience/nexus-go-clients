/*
Vaudience AI Core API

API for the Vaudience AI Core

API version: 0.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package core

import (
	"encoding/json"
	"fmt"
)

// checks if the RoleResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoleResponse{}

// RoleResponse struct for RoleResponse
type RoleResponse struct {
	CreatedAt string `json:"createdAt"`
	Id string `json:"id"`
	Name string `json:"name"`
	Permissions []string `json:"permissions"`
	UpdatedAt string `json:"updatedAt"`
	AdditionalProperties map[string]interface{}
}

type _RoleResponse RoleResponse

// NewRoleResponse instantiates a new RoleResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoleResponse(createdAt string, id string, name string, permissions []string, updatedAt string) *RoleResponse {
	this := RoleResponse{}
	this.CreatedAt = createdAt
	this.Id = id
	this.Name = name
	this.Permissions = permissions
	this.UpdatedAt = updatedAt
	return &this
}

// NewRoleResponseWithDefaults instantiates a new RoleResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoleResponseWithDefaults() *RoleResponse {
	this := RoleResponse{}
	return &this
}

// GetCreatedAt returns the CreatedAt field value
func (o *RoleResponse) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *RoleResponse) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *RoleResponse) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetId returns the Id field value
func (o *RoleResponse) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *RoleResponse) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *RoleResponse) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *RoleResponse) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *RoleResponse) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *RoleResponse) SetName(v string) {
	o.Name = v
}

// GetPermissions returns the Permissions field value
func (o *RoleResponse) GetPermissions() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value
// and a boolean to check if the value has been set.
func (o *RoleResponse) GetPermissionsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Permissions, true
}

// SetPermissions sets field value
func (o *RoleResponse) SetPermissions(v []string) {
	o.Permissions = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *RoleResponse) GetUpdatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *RoleResponse) GetUpdatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *RoleResponse) SetUpdatedAt(v string) {
	o.UpdatedAt = v
}

func (o RoleResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoleResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["createdAt"] = o.CreatedAt
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["permissions"] = o.Permissions
	toSerialize["updatedAt"] = o.UpdatedAt

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RoleResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"createdAt",
		"id",
		"name",
		"permissions",
		"updatedAt",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRoleResponse := _RoleResponse{}

	err = json.Unmarshal(data, &varRoleResponse)

	if err != nil {
		return err
	}

	*o = RoleResponse(varRoleResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "createdAt")
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "permissions")
		delete(additionalProperties, "updatedAt")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRoleResponse struct {
	value *RoleResponse
	isSet bool
}

func (v NullableRoleResponse) Get() *RoleResponse {
	return v.value
}

func (v *NullableRoleResponse) Set(val *RoleResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableRoleResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableRoleResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoleResponse(val *RoleResponse) *NullableRoleResponse {
	return &NullableRoleResponse{value: val, isSet: true}
}

func (v NullableRoleResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoleResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


