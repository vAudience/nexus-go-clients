/*
Vaudience AI Core API

API for the Vaudience AI Core

API version: 0.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package core

import (
	"encoding/json"
	"fmt"
)

// checks if the UserResultsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserResultsResponse{}

// UserResultsResponse struct for UserResultsResponse
type UserResultsResponse struct {
	Results []UserResponse `json:"results"`
	TotalResults int32 `json:"totalResults"`
	AdditionalProperties map[string]interface{}
}

type _UserResultsResponse UserResultsResponse

// NewUserResultsResponse instantiates a new UserResultsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserResultsResponse(results []UserResponse, totalResults int32) *UserResultsResponse {
	this := UserResultsResponse{}
	this.Results = results
	this.TotalResults = totalResults
	return &this
}

// NewUserResultsResponseWithDefaults instantiates a new UserResultsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserResultsResponseWithDefaults() *UserResultsResponse {
	this := UserResultsResponse{}
	return &this
}

// GetResults returns the Results field value
func (o *UserResultsResponse) GetResults() []UserResponse {
	if o == nil {
		var ret []UserResponse
		return ret
	}

	return o.Results
}

// GetResultsOk returns a tuple with the Results field value
// and a boolean to check if the value has been set.
func (o *UserResultsResponse) GetResultsOk() ([]UserResponse, bool) {
	if o == nil {
		return nil, false
	}
	return o.Results, true
}

// SetResults sets field value
func (o *UserResultsResponse) SetResults(v []UserResponse) {
	o.Results = v
}

// GetTotalResults returns the TotalResults field value
func (o *UserResultsResponse) GetTotalResults() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TotalResults
}

// GetTotalResultsOk returns a tuple with the TotalResults field value
// and a boolean to check if the value has been set.
func (o *UserResultsResponse) GetTotalResultsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalResults, true
}

// SetTotalResults sets field value
func (o *UserResultsResponse) SetTotalResults(v int32) {
	o.TotalResults = v
}

func (o UserResultsResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserResultsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["results"] = o.Results
	toSerialize["totalResults"] = o.TotalResults

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UserResultsResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"results",
		"totalResults",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserResultsResponse := _UserResultsResponse{}

	err = json.Unmarshal(data, &varUserResultsResponse)

	if err != nil {
		return err
	}

	*o = UserResultsResponse(varUserResultsResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "results")
		delete(additionalProperties, "totalResults")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUserResultsResponse struct {
	value *UserResultsResponse
	isSet bool
}

func (v NullableUserResultsResponse) Get() *UserResultsResponse {
	return v.value
}

func (v *NullableUserResultsResponse) Set(val *UserResultsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUserResultsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUserResultsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserResultsResponse(val *UserResultsResponse) *NullableUserResultsResponse {
	return &NullableUserResultsResponse{value: val, isSet: true}
}

func (v NullableUserResultsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserResultsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


