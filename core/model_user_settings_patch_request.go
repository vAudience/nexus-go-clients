/*
Vaudience AI Core API

API for the Vaudience AI Core

API version: 0.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package core

import (
	"encoding/json"
)

// checks if the UserSettingsPatchRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserSettingsPatchRequest{}

// UserSettingsPatchRequest struct for UserSettingsPatchRequest
type UserSettingsPatchRequest struct {
	ColorScheme *string `json:"colorScheme,omitempty"`
	Language *string `json:"language,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UserSettingsPatchRequest UserSettingsPatchRequest

// NewUserSettingsPatchRequest instantiates a new UserSettingsPatchRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserSettingsPatchRequest() *UserSettingsPatchRequest {
	this := UserSettingsPatchRequest{}
	return &this
}

// NewUserSettingsPatchRequestWithDefaults instantiates a new UserSettingsPatchRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserSettingsPatchRequestWithDefaults() *UserSettingsPatchRequest {
	this := UserSettingsPatchRequest{}
	return &this
}

// GetColorScheme returns the ColorScheme field value if set, zero value otherwise.
func (o *UserSettingsPatchRequest) GetColorScheme() string {
	if o == nil || IsNil(o.ColorScheme) {
		var ret string
		return ret
	}
	return *o.ColorScheme
}

// GetColorSchemeOk returns a tuple with the ColorScheme field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettingsPatchRequest) GetColorSchemeOk() (*string, bool) {
	if o == nil || IsNil(o.ColorScheme) {
		return nil, false
	}
	return o.ColorScheme, true
}

// HasColorScheme returns a boolean if a field has been set.
func (o *UserSettingsPatchRequest) HasColorScheme() bool {
	if o != nil && !IsNil(o.ColorScheme) {
		return true
	}

	return false
}

// SetColorScheme gets a reference to the given string and assigns it to the ColorScheme field.
func (o *UserSettingsPatchRequest) SetColorScheme(v string) {
	o.ColorScheme = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *UserSettingsPatchRequest) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettingsPatchRequest) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *UserSettingsPatchRequest) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *UserSettingsPatchRequest) SetLanguage(v string) {
	o.Language = &v
}

func (o UserSettingsPatchRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserSettingsPatchRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ColorScheme) {
		toSerialize["colorScheme"] = o.ColorScheme
	}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UserSettingsPatchRequest) UnmarshalJSON(data []byte) (err error) {
	varUserSettingsPatchRequest := _UserSettingsPatchRequest{}

	err = json.Unmarshal(data, &varUserSettingsPatchRequest)

	if err != nil {
		return err
	}

	*o = UserSettingsPatchRequest(varUserSettingsPatchRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "colorScheme")
		delete(additionalProperties, "language")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUserSettingsPatchRequest struct {
	value *UserSettingsPatchRequest
	isSet bool
}

func (v NullableUserSettingsPatchRequest) Get() *UserSettingsPatchRequest {
	return v.value
}

func (v *NullableUserSettingsPatchRequest) Set(val *UserSettingsPatchRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUserSettingsPatchRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUserSettingsPatchRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserSettingsPatchRequest(val *UserSettingsPatchRequest) *NullableUserSettingsPatchRequest {
	return &NullableUserSettingsPatchRequest{value: val, isSet: true}
}

func (v NullableUserSettingsPatchRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserSettingsPatchRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


