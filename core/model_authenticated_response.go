/*
Vaudience AI Core API

API for the Vaudience AI Core

API version: 0.2.8
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package core

import (
	"encoding/json"
	"fmt"
)

// checks if the AuthenticatedResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuthenticatedResponse{}

// AuthenticatedResponse struct for AuthenticatedResponse
type AuthenticatedResponse struct {
	Authenticated bool `json:"authenticated"`
	Email *string `json:"email,omitempty"`
	Name *string `json:"name,omitempty"`
	TokenExpiresInSec *int32 `json:"tokenExpiresInSec,omitempty"`
	UserId *string `json:"userId,omitempty"`
	Username *string `json:"username,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AuthenticatedResponse AuthenticatedResponse

// NewAuthenticatedResponse instantiates a new AuthenticatedResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthenticatedResponse(authenticated bool) *AuthenticatedResponse {
	this := AuthenticatedResponse{}
	this.Authenticated = authenticated
	return &this
}

// NewAuthenticatedResponseWithDefaults instantiates a new AuthenticatedResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthenticatedResponseWithDefaults() *AuthenticatedResponse {
	this := AuthenticatedResponse{}
	return &this
}

// GetAuthenticated returns the Authenticated field value
func (o *AuthenticatedResponse) GetAuthenticated() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Authenticated
}

// GetAuthenticatedOk returns a tuple with the Authenticated field value
// and a boolean to check if the value has been set.
func (o *AuthenticatedResponse) GetAuthenticatedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Authenticated, true
}

// SetAuthenticated sets field value
func (o *AuthenticatedResponse) SetAuthenticated(v bool) {
	o.Authenticated = v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *AuthenticatedResponse) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticatedResponse) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *AuthenticatedResponse) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *AuthenticatedResponse) SetEmail(v string) {
	o.Email = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AuthenticatedResponse) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticatedResponse) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AuthenticatedResponse) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AuthenticatedResponse) SetName(v string) {
	o.Name = &v
}

// GetTokenExpiresInSec returns the TokenExpiresInSec field value if set, zero value otherwise.
func (o *AuthenticatedResponse) GetTokenExpiresInSec() int32 {
	if o == nil || IsNil(o.TokenExpiresInSec) {
		var ret int32
		return ret
	}
	return *o.TokenExpiresInSec
}

// GetTokenExpiresInSecOk returns a tuple with the TokenExpiresInSec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticatedResponse) GetTokenExpiresInSecOk() (*int32, bool) {
	if o == nil || IsNil(o.TokenExpiresInSec) {
		return nil, false
	}
	return o.TokenExpiresInSec, true
}

// HasTokenExpiresInSec returns a boolean if a field has been set.
func (o *AuthenticatedResponse) HasTokenExpiresInSec() bool {
	if o != nil && !IsNil(o.TokenExpiresInSec) {
		return true
	}

	return false
}

// SetTokenExpiresInSec gets a reference to the given int32 and assigns it to the TokenExpiresInSec field.
func (o *AuthenticatedResponse) SetTokenExpiresInSec(v int32) {
	o.TokenExpiresInSec = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *AuthenticatedResponse) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticatedResponse) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *AuthenticatedResponse) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *AuthenticatedResponse) SetUserId(v string) {
	o.UserId = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *AuthenticatedResponse) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticatedResponse) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *AuthenticatedResponse) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *AuthenticatedResponse) SetUsername(v string) {
	o.Username = &v
}

func (o AuthenticatedResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuthenticatedResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["authenticated"] = o.Authenticated
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.TokenExpiresInSec) {
		toSerialize["tokenExpiresInSec"] = o.TokenExpiresInSec
	}
	if !IsNil(o.UserId) {
		toSerialize["userId"] = o.UserId
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AuthenticatedResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"authenticated",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAuthenticatedResponse := _AuthenticatedResponse{}

	err = json.Unmarshal(data, &varAuthenticatedResponse)

	if err != nil {
		return err
	}

	*o = AuthenticatedResponse(varAuthenticatedResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "authenticated")
		delete(additionalProperties, "email")
		delete(additionalProperties, "name")
		delete(additionalProperties, "tokenExpiresInSec")
		delete(additionalProperties, "userId")
		delete(additionalProperties, "username")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAuthenticatedResponse struct {
	value *AuthenticatedResponse
	isSet bool
}

func (v NullableAuthenticatedResponse) Get() *AuthenticatedResponse {
	return v.value
}

func (v *NullableAuthenticatedResponse) Set(val *AuthenticatedResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthenticatedResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthenticatedResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthenticatedResponse(val *AuthenticatedResponse) *NullableAuthenticatedResponse {
	return &NullableAuthenticatedResponse{value: val, isSet: true}
}

func (v NullableAuthenticatedResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthenticatedResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


