/*
Vaudience AI Core API

API for the Vaudience AI Core

API version: 0.2.5
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package core

import (
	"encoding/json"
	"fmt"
)

// checks if the UserSettingsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserSettingsResponse{}

// UserSettingsResponse struct for UserSettingsResponse
type UserSettingsResponse struct {
	ColorScheme string `json:"colorScheme"`
	Id string `json:"id"`
	Language string `json:"language"`
	UserId string `json:"userId"`
	AdditionalProperties map[string]interface{}
}

type _UserSettingsResponse UserSettingsResponse

// NewUserSettingsResponse instantiates a new UserSettingsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserSettingsResponse(colorScheme string, id string, language string, userId string) *UserSettingsResponse {
	this := UserSettingsResponse{}
	this.ColorScheme = colorScheme
	this.Id = id
	this.Language = language
	this.UserId = userId
	return &this
}

// NewUserSettingsResponseWithDefaults instantiates a new UserSettingsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserSettingsResponseWithDefaults() *UserSettingsResponse {
	this := UserSettingsResponse{}
	return &this
}

// GetColorScheme returns the ColorScheme field value
func (o *UserSettingsResponse) GetColorScheme() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ColorScheme
}

// GetColorSchemeOk returns a tuple with the ColorScheme field value
// and a boolean to check if the value has been set.
func (o *UserSettingsResponse) GetColorSchemeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ColorScheme, true
}

// SetColorScheme sets field value
func (o *UserSettingsResponse) SetColorScheme(v string) {
	o.ColorScheme = v
}

// GetId returns the Id field value
func (o *UserSettingsResponse) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *UserSettingsResponse) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *UserSettingsResponse) SetId(v string) {
	o.Id = v
}

// GetLanguage returns the Language field value
func (o *UserSettingsResponse) GetLanguage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Language
}

// GetLanguageOk returns a tuple with the Language field value
// and a boolean to check if the value has been set.
func (o *UserSettingsResponse) GetLanguageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Language, true
}

// SetLanguage sets field value
func (o *UserSettingsResponse) SetLanguage(v string) {
	o.Language = v
}

// GetUserId returns the UserId field value
func (o *UserSettingsResponse) GetUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *UserSettingsResponse) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *UserSettingsResponse) SetUserId(v string) {
	o.UserId = v
}

func (o UserSettingsResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserSettingsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["colorScheme"] = o.ColorScheme
	toSerialize["id"] = o.Id
	toSerialize["language"] = o.Language
	toSerialize["userId"] = o.UserId

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UserSettingsResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"colorScheme",
		"id",
		"language",
		"userId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserSettingsResponse := _UserSettingsResponse{}

	err = json.Unmarshal(data, &varUserSettingsResponse)

	if err != nil {
		return err
	}

	*o = UserSettingsResponse(varUserSettingsResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "colorScheme")
		delete(additionalProperties, "id")
		delete(additionalProperties, "language")
		delete(additionalProperties, "userId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUserSettingsResponse struct {
	value *UserSettingsResponse
	isSet bool
}

func (v NullableUserSettingsResponse) Get() *UserSettingsResponse {
	return v.value
}

func (v *NullableUserSettingsResponse) Set(val *UserSettingsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUserSettingsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUserSettingsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserSettingsResponse(val *UserSettingsResponse) *NullableUserSettingsResponse {
	return &NullableUserSettingsResponse{value: val, isSet: true}
}

func (v NullableUserSettingsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserSettingsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


